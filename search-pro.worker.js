const{entries:V}=Object,{fromEntries:et}=Object,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":140,\"nextId\":140,\"documentIds\":{\"0\":\"1\",\"1\":\"2\",\"2\":\"2@0\",\"3\":\"3\",\"4\":\"3#插入排序\",\"5\":\"3#选择排序\",\"6\":\"3#冒泡排序\",\"7\":\"3#归并排序\",\"8\":\"3@0\",\"9\":\"3@1\",\"10\":\"4\",\"11\":\"4#o-定义\",\"12\":\"4#ω-定义\",\"13\":\"4#θ-定义\",\"14\":\"4#o-定义-1\",\"15\":\"4#ω-定义-1\",\"16\":\"4@0\",\"17\":\"5\",\"18\":\"5#矩阵相乘\",\"19\":\"5#矩阵相乘-分治\",\"20\":\"5#矩阵相乘-strassen\",\"21\":\"5#递归时间复杂度计算方法\",\"22\":\"5#替换法\",\"23\":\"5#递归树法\",\"24\":\"5#主方法\",\"25\":\"5#akra-bazi法\",\"26\":\"5@0\",\"27\":\"5@1\",\"28\":\"6\",\"29\":\"6#雇佣问题\",\"30\":\"6#指示器随机变量\",\"31\":\"6#示例-雇佣问题\",\"32\":\"6#示例-逆序对的期望数\",\"33\":\"6#随机化算法\",\"34\":\"6#概率分析示例\",\"35\":\"6#生日悖论\",\"36\":\"6#球与桶\",\"37\":\"6@0\",\"38\":\"6@1\",\"39\":\"7\",\"40\":\"7#堆\",\"41\":\"7#维持堆的性质\",\"42\":\"7#构造堆\",\"43\":\"7#时间复杂度\",\"44\":\"7#堆排序\",\"45\":\"7#优先级队列\",\"46\":\"7@0\",\"47\":\"7@1\",\"48\":\"8\",\"49\":\"8#快速排序\",\"50\":\"8#最坏情况下的划分\",\"51\":\"8#最好情况下的划分\",\"52\":\"8#随机快速排序\",\"53\":\"8#最坏情况分析\",\"54\":\"8#期望运行时间\",\"55\":\"8@0\",\"56\":\"8@1\",\"57\":\"9\",\"58\":\"9#计数排序\",\"59\":\"9#基数排序\",\"60\":\"9#桶排序\",\"61\":\"9@0\",\"62\":\"9@1\",\"63\":\"10\",\"64\":\"10#最小和最大\",\"65\":\"10#期望线性时间选择算法\",\"66\":\"10#最坏情况线性时间选择算法\",\"67\":\"10@0\",\"68\":\"10@1\",\"69\":\"11\",\"70\":\"11@0\",\"71\":\"12\",\"72\":\"12#cpu-vs-gpu\",\"73\":\"12#kernels\",\"74\":\"12#thread-hierarchy\",\"75\":\"12#thread-block-clusters\",\"76\":\"12#memory-hierarchy\",\"77\":\"12@0\",\"78\":\"13\",\"79\":\"13@0\",\"80\":\"14\",\"81\":\"14#蒙特卡洛估计\",\"82\":\"14#蒙特卡洛估计误差\",\"83\":\"14#提升蒙特卡洛估计效率\",\"84\":\"14#分层采样-stratified-sampling\",\"85\":\"14#重要性采样-importance-sampling\",\"86\":\"14#多重重要性采样-multiple-importance-sampling-mis\",\"87\":\"14#俄罗斯轮盘-russian-roulette\",\"88\":\"14#划分-splitting\",\"89\":\"14@0\",\"90\":\"14@1\",\"91\":\"15\",\"92\":\"15@0\",\"93\":\"16\",\"94\":\"16#光栅化线段-bresenhan-line-algorithm\",\"95\":\"16#光栅化三角形\",\"96\":\"16#重心坐标计算\",\"97\":\"16#透视正确插值\",\"98\":\"16@0\",\"99\":\"16@1\",\"100\":\"17\",\"101\":\"17#概览\",\"102\":\"17#光源\",\"103\":\"17#方向光\",\"104\":\"17#点光源\",\"105\":\"17#聚光灯\",\"106\":\"17#着色模型\",\"107\":\"17#ambient\",\"108\":\"17#lambertian\",\"109\":\"17#blinn-phong\",\"110\":\"17@0\",\"111\":\"17@1\",\"112\":\"18\",\"113\":\"18#纹理放大\",\"114\":\"18#最近邻采样\",\"115\":\"18#双线性插值采样\",\"116\":\"18#纹理缩小\",\"117\":\"18#mipmapping\",\"118\":\"18@0\",\"119\":\"18@1\",\"120\":\"19\",\"121\":\"19#线性代数基础\",\"122\":\"19#秩\",\"123\":\"19#行列式\",\"124\":\"19#基本变换\",\"125\":\"19#平移\",\"126\":\"19#旋转\",\"127\":\"19#推导\",\"128\":\"19#缩放\",\"129\":\"19#剪切\",\"130\":\"19#法线变换\",\"131\":\"19#视图变换\",\"132\":\"19#投影矩阵\",\"133\":\"19#正交投影\",\"134\":\"19#opengl\",\"135\":\"19#directx\",\"136\":\"19#透视投影\",\"137\":\"19@0\",\"138\":\"19@1\",\"139\":\"20\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,2],\"1\":[1],\"2\":[null,null,1],\"3\":[1],\"4\":[1,22],\"5\":[1,21],\"6\":[1,17],\"7\":[1,37],\"8\":[null,null,1],\"9\":[null,null,1],\"10\":[1],\"11\":[1,10],\"12\":[1,10],\"13\":[1,11],\"14\":[1,13],\"15\":[1,13],\"16\":[null,null,1],\"17\":[1],\"18\":[1,18],\"19\":[3,48],\"20\":[3,16],\"21\":[1],\"22\":[1,28],\"23\":[1,8],\"24\":[1,38],\"25\":[2,21],\"26\":[null,null,1],\"27\":[null,null,1],\"28\":[1],\"29\":[1,42],\"30\":[1,19],\"31\":[3,26],\"32\":[3,12],\"33\":[1,91],\"34\":[1],\"35\":[1,48],\"36\":[1,67],\"37\":[null,null,1],\"38\":[null,null,2],\"39\":[1],\"40\":[1,10],\"41\":[1,31],\"42\":[1,14],\"43\":[1,21],\"44\":[1,20],\"45\":[1,41],\"46\":[null,null,1],\"47\":[null,null,2],\"48\":[1],\"49\":[1,38],\"50\":[1,13],\"51\":[1,18],\"52\":[1,18],\"53\":[1,37],\"54\":[1,62],\"55\":[null,null,1],\"56\":[null,null,1],\"57\":[1,5],\"58\":[1,46],\"59\":[1,50],\"60\":[1,57],\"61\":[null,null,1],\"62\":[null,null,3],\"63\":[1,11],\"64\":[1,27],\"65\":[1,31],\"66\":[1,76],\"67\":[null,null,1],\"68\":[null,null,2],\"69\":[1],\"70\":[null,null,1],\"71\":[2],\"72\":[3],\"73\":[1,20],\"74\":[2,62],\"75\":[3,75],\"76\":[2],\"77\":[null,null,1],\"78\":[1],\"79\":[null,null,1],\"80\":[1],\"81\":[1,36],\"82\":[1,59],\"83\":[1],\"84\":[3,26],\"85\":[3,33],\"86\":[6,2],\"87\":[3,27],\"88\":[2,2],\"89\":[null,null,1],\"90\":[null,null,1],\"91\":[1],\"92\":[null,null,1],\"93\":[1],\"94\":[5,13],\"95\":[1,45],\"96\":[1,18],\"97\":[1,73],\"98\":[null,null,1],\"99\":[null,null,1],\"100\":[1],\"101\":[1],\"102\":[1],\"103\":[1],\"104\":[1],\"105\":[1],\"106\":[1],\"107\":[1,1],\"108\":[1,4],\"109\":[2,9],\"110\":[null,null,1],\"111\":[null,null,1],\"112\":[1],\"113\":[1],\"114\":[1],\"115\":[1],\"116\":[1],\"117\":[1],\"118\":[null,null,1],\"119\":[null,null,1],\"120\":[1],\"121\":[1,23],\"122\":[1,3],\"123\":[1,14],\"124\":[1,22],\"125\":[1,7],\"126\":[1,13],\"127\":[1,10],\"128\":[1,3],\"129\":[1,3],\"130\":[1,21],\"131\":[1,43],\"132\":[1],\"133\":[1,31],\"134\":[1,8],\"135\":[1,8],\"136\":[1,38],\"137\":[null,null,1],\"138\":[null,null,1],\"139\":[1,3]},\"averageFieldLength\":[1.2836245669357922,24.36516077317701,0.7415577682691094],\"storedFields\":{\"0\":{\"h\":\"介绍页\",\"t\":[\"将你的个人介绍和档案放置在此处。\"]},\"1\":{\"h\":\"算法导论\"},\"2\":{\"c\":[\"算法\"]},\"3\":{\"h\":\"基础排序\"},\"4\":{\"h\":\"插入排序\",\"t\":[\"insertion_sort(A,n) for i = 2 to n key = A[i] // Insert A[i] into the sorted subarray A[1:i-1]. j = i - 1 while j > 0 and A[j] > key A[j + 1] = A[j] j = j - 1 A[j + 1] = key\"]},\"5\":{\"h\":\"选择排序\",\"t\":[\"selection_sort(A,n) for i = 1 to n - 1 // Find smallest element in A[i:n] and exchange with A[i]. smallest = i for j = i + 1 to n if A[j] < A[smallest] smallest = j exchange A[i] with A[smallest]\"]},\"6\":{\"h\":\"冒泡排序\",\"t\":[\"bubble_sort(A,n) for i = 1 to n - 1 for j = n downto i + 1 if A[j] < A[j - 1] exchange A[j] with A[j - 1]\"]},\"7\":{\"h\":\"归并排序\",\"t\":[\"merge(A,p,q,r) n_l = q - p + 1 // length of A[p:q] n_r = r - q // length of A[q+1:r] let L and R be new arrays for i = 0 to n_l - 1 // copy to L L[i] = A[p + i] for j = 0 to n_r - 1 R[j] = A[q + 1 + j] // copy to R i = 0 j = 0 k = p while i < n_l and j < n_r if L[i] ≤ R[j] A[k] = L[i] i = i + 1 else A[k] = R[j] j = j + 1 k = k + 1 while i < n_l A[k] = L[i] i = i + 1 k = k + 1 while j < n_r A[k] = R[j] j = j + 1 k = k + 1 merge_sort(A,p,r) if p ≥ r return q = (p + r) / 2 merge_sort(A,p,q) merge_sort(A,q+1,r) merge(A,p,q,r)\"]},\"8\":{\"c\":[\"算法\"]},\"9\":{\"c\":[\"排序\"]},\"10\":{\"h\":\"渐进复杂度\"},\"11\":{\"h\":\"定义\",\"t\":[\"公式\",\"O(g(n))={f(n):0≤f(n)≤cg(n)∀n≥n0​}\"]},\"12\":{\"h\":\"定义\",\"t\":[\"公式\",\"Ω(g(n))={f(n):0≤cg(n)≤f(n)∀n≥n0​}\"]},\"13\":{\"h\":\"定义\",\"t\":[\"公式\",\"Θ(g(n))={f(n):0≤c1​g(n)≤f(n)≤c2​g(n)∀n≥n0​}\"]},\"14\":{\"h\":\"定义\",\"t\":[\"公式\",\"o(g(n))={f(n):∀c∃n0​>0,0≤f(n)<cg(n)∀n≥n0​}\",\"即\",\"n→∞lim​g(n)f(n)​=0\"]},\"15\":{\"h\":\"定义\",\"t\":[\"公式\",\"ω(g(n))={f(n):∀c∃n0​>0,0≤cg(n)<f(n)∀n≥n0​}\",\"即\",\"n→∞lim​g(n)f(n)​=∞\"]},\"16\":{\"c\":[\"算法\"]},\"17\":{\"h\":\"分治\"},\"18\":{\"h\":\"矩阵相乘\",\"t\":[\"matrix_multiply(A,B,C,n) for i = 1 to n for j = 1 to n for k = 1 to n C[i][j] = C[i][j] + A[i][k] * B[k][j]\",\"时间复杂度为 Θ(n3)\"]},\"19\":{\"h\":\"矩阵相乘（分治）\",\"t\":[\"(C11​C21​​C12​C22​​)​=(A11​A21​​A12​A22​​)(B11​B21​​B12​B22​​)=(A11​⋅B11​+A12​⋅B21​A21​⋅B11​+A22​⋅B21​​A11​⋅B12​+A12​⋅B22​A21​⋅B12​+A22​⋅B22​​)​\",\"matrix_multiply_recursive(A,B,C,n) if n == 1 // Base case. C[1][1] = C[1][1] + A[1][1] * B[1][1] return // Divide. partition A,B,and C into n/2 x n/2 submatrices // Conquer. matrix_multiply_recursive(A₁₁,B₁₁,C₁₁,n/2) matrix_multiply_recursive(A₁₁,B₁₂,C₁₂,n/2) matrix_multiply_recursive(A₂₁,B₁₁,C₂₁,n/2) matrix_multiply_recursive(A₂₁,B₁₂,C₂₂,n/2) matrix_multiply_recursive(A₁₂,B₂₁,C₁₁,n/2) matrix_multiply_recursive(A₁₂,B₂₂,C₁₂,n/2) matrix_multiply_recursive(A₂₂,B₂₁,C₂₁,n/2) matrix_multiply_recursive(A₂₂,B₂₂,C₂₂,n/2)\",\"时间复杂度为\",\"T(n)=8T(n/2)+Θ(1)=Θ(n3)\"]},\"20\":{\"h\":\"矩阵相乘（Strassen）\",\"t\":[\"提示\",\"基本思想是将子问题从8次矩阵乘法减少到7次，代价是4次矩阵加法增加到18次，从而降低了总的时间复杂度\",\"时间复杂度为\",\"T(n)=7T(n/2)+Θ(n2)=Θ(nlg7)=O(n2.81)\"]},\"21\":{\"h\":\"递归时间复杂度计算方法\"},\"22\":{\"h\":\"替换法\",\"t\":[\"提示\",\"替换法主要分为两个步骤：1. 猜测 2. 使用数学归纳法进行证明\",\"下面我们使用替换法来计算以下这个递归的时间复杂度\",\"T(n)=2T(⌊n/2⌋)+Θ(n)\",\"猜测\",\"T(n)=O(nlgn)\",\"证明 当 n >= 2n₀ 时有\",\"T(n)​≤2c⌊n/2⌋lg(⌊n/2⌋)+Θ(n)≤2c(n/2)lg(n/2)+Θ(n)=cnlg(n/2)+Θ(n)=cnlgn−cn+Θ(n)≤cnlgn​\",\"只要 c 取得足够大，就能保证最后的不等式成立\"]},\"23\":{\"h\":\"递归树法\",\"t\":[\"同样使用以下这个递归来演示递归树法是如何计算时间复杂度的\",\"T(n)=3T(n/4)+Θ(n2)\"]},\"24\":{\"h\":\"主方法\",\"t\":[\"提示\",\"对于递归等式 T(n) = aT(n/b) + f(n), 其中 a > 0, b > 1 且对于任意大n满足f(n)非负，其时间复杂度计算可以根据以下情况分类\",\"如果存在ε>0使得\",\"f(n)=O(nlogb​a−ϵ)\",\"则\",\"T(n)=Θ(nlogb​a)\",\"如果存在k >= 0 使得\",\"f(n)=Θ(nlogb​algkn)\",\"则\",\"T(n)=Θ(nlogb​algk+1n)\",\"如果存在ε>0使得\",\"f(n)=Ω(nlogb​a+ϵ)\",\"并且f(n)满足 af(n/b) <= cf(n)，其中 c < 1, 则\",\"T(n)=Θ(f(n))\"]},\"25\":{\"h\":\"Akra-Bazi法\",\"t\":[\"提示\",\"Akra-Bazi是主方法的一般化形式，用于解决如下的递归等式\",\"T(n)=i=1∑k​ai​T(n/bi​)+f(n)\",\"当f(n)满足多项式成长的条件，则\",\"T(n)=Θ(np(1+∫1n​xp+1f(x)​dx))\",\"其中 p 满足\",\"i=1∑k​bip​ai​​=1\"]},\"26\":{\"c\":[\"算法\"]},\"27\":{\"c\":[\"分治\"]},\"28\":{\"h\":\"概率分析和随机化算法\"},\"29\":{\"h\":\"雇佣问题\",\"t\":[\"hire_assistant(n) best = 0 // candidate 0 is a least-qualified dummy candidate for i = 1 to n interview candidate i if candidate i is better than candidate best best = i hire candidate i\",\"最坏情况下时间复杂度为 O(ci​n+ch​n) 假定知道输入的分布情况下，通过概率分析可以计算出平均情况时间复杂度。\",\"提示\",\"对于雇佣问题，每一个申请人(编号 1 - n)都有一个排名 rank(1) - rank(n)，<rank(1), ... , rank(n)> 是列表 <1, 2, ... , n> 的一个排列；我们可以假定申请人以完全随机的顺序进来，则表示所有 n! 个排列出现的概率都相等。\"]},\"30\":{\"h\":\"指示器随机变量\",\"t\":[\"给定样本空间 S 和事件 A，指示器随机变量 I{A} 定义为\",\"I{A}={10​A occursA does not occur​\",\"引理\",\"给定样本空间 S 和事件 A，令 XA = I{A}，则有 E[XA] = Pr\"]},\"31\":{\"h\":\"示例（雇佣问题）\",\"t\":[\"令随机变量 X 表示雇佣次数，Xi 表示第 i 个申请人是否雇佣，即\",\"Xi​​=I{candidate i is hired}={10​if candidate i is hiredif candidate i is not hired​​\",\"则有\",\"E[X]​=E[i=1∑n​Xi​]=i=1∑n​E[Xi​]=i=1∑n​i1​=lnn+O(1)​\"]},\"32\":{\"h\":\"示例（逆序对的期望数）\",\"t\":[\"将期望分解为每一个具体的事件：共有 C(n,2) 对数，每对数为逆序对的概率是 1/2. (单个事件的期望是 1/2). 那么总得期望就是：C(n,2) * 1/2 = n(n-1)/4\"]},\"33\":{\"h\":\"随机化算法\",\"t\":[\"提示\",\"很多情况下，我们并不知道输入的分布情况或者无法对输入的分布进行建模，这时候就可以使用随机化算法。例如，对于雇佣问题我们不按照给定的1 - n 顺序来面试，而是每次都随机选择一个申请人来面试。\",\"randomized_hire_assistant(n) randomly permute the list of candidates hire_assistant(n)\",\"综上，随机化算法的行为不仅取决于输入，还取决于随机数生成器所产生的结果；一般使用期望运行时间来描述随机化算法运行复杂度。\",\"随机排列数组\",\"randomly_permute(A,n) for i = 1 to n swap A[i] with A[RANDOM(i,n)]\",\"接下来使用数学归纳法证明该算法可以产生随机的排列分布\",\"假设： 经过 k 次循环之后，对于 n 个元素中的任一 k 排列，A[1:k] 是该排列的概率都相等, 等于 (n - k)! / n! 推导： 经过 k+1 次循环之后，记数组 A 中前 k+1 个元素为 <x1,x2,...,xk+1>，令 E1 表示经过前面 k 次循环之后数组 A 中前 k 个元素正好为 <x1,x2,...,xk>，根据假设有\",\"P{E1​}=n!(n−k)!​\",\"令 E2 表示第 k+1 次循环中选择 xk+1 放入 A[k+1] 中，则 E = E1∩E2 表示数组 A 中前 k+1 个元素正好为 <x1,x2,...,xk+1>，其概率为\",\"P{E}​=P{E1​∩E2​}=P{E2​∣E1​}P{E1​}=n−k1​⋅n!(n−k)!​=n!(n−k−1)!​​\",\"初始： 当 k = 1 时，令 E 表示 A[1] = x1，则 P{E} = 1/n = (n - 1)! / n! 成立终止： 经过 n 次循环之后，数组 A 的任一 n 排列的概率为 (n - n)! / n! = 1 / n!\"]},\"34\":{\"h\":\"概率分析示例\"},\"35\":{\"h\":\"生日悖论\",\"t\":[\"问题\",\"期望多少人情况下，有 2 个人生日相同？\",\"解： 令 Xij 表示 (i,j) 两人生日相同，有 E[Xij] = 1/n\",\"Xij​​=I{person i and j have the same birthday}={10​if person i and j have the same birthdayotherwise​​\",\"令 X 表示有多少对生日相同，则\",\"E[X]​=E[i=1∑k−1​j=i+1∑k​Xij​]=i=1∑k−1​j=i+1∑k​E[Xij​]=(k2​)n1​=2nk(k−1)​​\",\"假设 n = 365 天，当 k(k-1) >= 2n 时，即 k = 28 人时，至少有一对生日相同\"]},\"36\":{\"h\":\"球与桶\",\"t\":[\"有 b 个相同的桶 <1, 2, ..., b>，随机将 n 个球投入桶中，投进每个桶中的概率都相等为 1/b，这一问题模型对于分析哈希算法特别有用\",\"问题 1\",\"每一个桶中期望会有多少个球 ?\",\"解： 令 Xi 表示第 i 个球进入指定的桶中，有 E[Xi] = 1 / b\",\"Xi​​=I{第 i 球进入指定的桶中}={10​第 i 球进入指定的桶中otherwise​​\",\"令 X 表示有多少球进入指定的桶中，则\",\"E[X]​=E[i=1∑n​Xi​]=i=1∑n​E[Xi​]=n/b​\",\"问题 2\",\"平均期望需要投多少个球，才能使得指定的桶中至少有1个球？\",\"解： 令 X 表示需要投多少球才能成功投进指定的桶，每次成功投进的概率为 p = 1 / b，失败概率为 q = (b -1）/ b，则 P{X=k} = qk-1p 符合几何分布，因此 E[X] = 1 / p = b\",\"问题 3\",\"平均期望需要投多少个球，才能使得每个桶中都至少有1个球？\",\"解： 可以将整个投球过程分为 b 个阶段，每一个阶段都会持续到投入一个空的桶中为止。令 Xi 表示第 i 个阶段中需要投多少球才能投进空的桶中，则 Xi 也符合几何分布且概率 p = (b - i + 1) / b，又令 X = X1 + ... + Xb 表示需要投多少球才能使得每个桶中都至少有 1 个球，则\",\"E[X]​=E[i=1∑b​Xi​]=i=1∑b​E[Xi​]=i=1∑b​b−i+1b​=bi=1∑b​i1​=b(lnb+O(1))​\"]},\"37\":{\"c\":[\"算法\"]},\"38\":{\"c\":[\"概率\",\"随机化算法\"]},\"39\":{\"h\":\"堆排序\"},\"40\":{\"h\":\"堆\",\"t\":[\"（最大堆）\",\"PARENT(i) return i/2 LEFT(i) return 2i RIGHT(i) return 2i+1\"]},\"41\":{\"h\":\"维持堆的性质\",\"t\":[\"max_heapify(A,i) l = LEFT(i) r = RIGHT(i) if l ≤ A.heap-size and A[l] > A[i] largest = l else largest = i if r ≤ A.heap-size and A[r] > A[largest] largest = r if largest ≠ i exchange A[i] with A[largest] max_heapify(A,largest)\",\"时间复杂度为 T(n) ≤ T(2n/3)+Θ(1) 根据主方法定理第二种情况可得 T(n) = O(lgn)\"]},\"42\":{\"h\":\"构造堆\",\"t\":[\"build_max_heap(A,n) A.heap-size = n for i = n/2 downto 1 max_heapify(A,i)\"]},\"43\":{\"h\":\"时间复杂度\",\"t\":[\"含有 n 个元素的堆的高度 ⌊n/2⌋，并且在任一高度 h 最多有 ⌈n/2h+1⌉ 个结点，则有\",\"T(n)​=h=0∑⌊lgn⌋​⌈2h+1n​⌉ch≤h=0∑⌊lgn⌋​2hn​ch=cnh=0∑⌊lgn⌋​2hh​≤cnh=0∑∞​2hh​≤cn⋅(1−1/2)21/2​=O(n)​\"]},\"44\":{\"h\":\"堆排序\",\"t\":[\"heapsort(A,n) build_max_heap(A,n) for i = n downto 2 exchange A[1] with A[i] A.heap-size = A.heap-size - 1 max_heapify(A,1)\",\"时间复杂度为 O(nlgn)\"]},\"45\":{\"h\":\"优先级队列\",\"t\":[\"max_heap_maximum(A) if A.heap-size < 1 return \\\"heap underflow\\\" return A[1] max_heap_extract_max(A) max = max_heap_maximum(A) A[1] = A[A.heap-size] A.heap-size = A.heap-size - 1 max_heapify(A,1) return max max_heap_increase_key(A,x,k) if k < x.key error \\\"new key is smaller than current key\\\" x.key = k // find the index i where A[i] = x while i > 1 and A[PARENT(i)].key < A[i].key exchange A[i] with A[PARENT(i)] i = PARENT(i) max_heap_insert(A,x,n) if A.heap-size == n error \\\"heap overflow\\\" A.heap-size = A.heap-size + 1 k = x.key x.key = -∞ A[A.heap-size] = x max_heap_increase_key(A,x,k)\"]},\"46\":{\"c\":[\"算法\"]},\"47\":{\"c\":[\"堆排序\",\"优先级队列\"]},\"48\":{\"h\":\"快速排序\"},\"49\":{\"h\":\"快速排序\",\"t\":[\"quicksort(A,p,r) if p < r // Partition the subarray around the pivot, which ends up in A[q]. q = partition(A,p,r) quick_sort(A,p,q-1) quick_sort(A,q+1,r)\",\"partition(A,p,r) x = A[r] i = p - 1 // highest index into the low side for j = p to r - 1 if A[j] ≤ x i = i + 1 exchange A[i] with A[j] exchange A[i+1] with A[r] return i + 1\"]},\"50\":{\"h\":\"最坏情况下的划分\",\"t\":[\"T(n)​=T(n−1)+T(0)+Θ(n)=T(n−1)+Θ(n)​\",\"可得\",\"T(n)=Θ(n2)\"]},\"51\":{\"h\":\"最好情况下的划分\",\"t\":[\"T(n)=2T(n/2)+Θ(n)\",\"可得\",\"T(n)=Θ(nlgn)\",\"相关信息\",\"假设每次划分都会分为 9 : 1, 则有\",\"T(n)=T(9n/10)+T(n/10)+Θ(n)=Θ(nlgn)\"]},\"52\":{\"h\":\"随机快速排序\",\"t\":[\"randomized_quicksort(A,p,r) if p < r q = randomized_partition(A,p,r) randomized_quicksort(A,p,q-1) randomized_quicksort(A,q+1,r)\",\"randomized_partition(A,p,r) i = random(p,r) exchange A[r] with A[i] return partition(A,p,r)\"]},\"53\":{\"h\":\"最坏情况分析\",\"t\":[\"T(n)=max{T(q)+T(n−1−q):0≤q≤n−1}+Θ(n)\",\"使用替换法分析，假设 T(n) ≤ cn²，则有\",\"T(n)​≤max{cq2+c(n−1−q)2:0≤q≤n−1}+Θ(n)=c⋅max{q2+(n−1−q)2:0≤q≤n−1}+Θ(n)​\",\"又\",\"q2+(n−1−q)2​=q2+(n−1)2−2q(n−1)+q2=(n−1)2+2q(q−(n−1))≤(n−1)2​\",\"可得\",\"T(n)​≤c(n−1)2+Θ(n)≤cn2−c(2n−1)+Θ(n)≤cn2​\",\"因此\",\"T(n)=Θ(n2)\"]},\"54\":{\"h\":\"期望运行时间\",\"t\":[\"引理1\",\"快速排序的运行时间是 O(n+X)，其中 X 等于元素比较的次数\",\"引理2\",\"对于 n 个元素的数组 z1​<z2​<...<zn​，在随机快速排序的执行过程中，元素 zi​ 和元素 zj​ 之间会进行比较，当且仅当在 Zij​ 中任意元素之前元素 zi​ 或元素 zj​ 被选为 pivot。 另外，没有两个元素之间会比较两次。\",\"引理3\",\"对于 n 个元素的数组 z1​<z2​<...<zn​，在随机快速排序的执行过程中，元素 zi​ 和元素 zj​ 之间会进行比较的概率是 2/(j−i+1)\",\"证明\",\"Pr{zi​ is compared with zj​}​=Pr{zi​ or zj​ is the first pivot chosen from Zij​}=Pr{zi​ is the first pivot chosen from Zij​}+Pr{zj​ is the first pivot chosen from Zij​}=j−i+12​​\",\"定理\",\"对于 n 个不同的元素的数组，随机快速排序的期望运行时间是 O(nlgn)\",\"证明\",\"X=i=1∑n−1​j=i+1∑n​Xij​\",\"其中 Xij​=I{zi​ is compared with zj​}, 根据期望的性质有\",\"E[X]​=E[i=1∑n−1​j=i+1∑n​Xij​]=i=1∑n−1​j=i+1∑n​E[Xij​]=i=1∑n−1​j=i+1∑n​Pr{zi​ is compared with zj​}=i=1∑n−1​j=i+1∑n​j−i+12​=i=1∑n−1​k=1∑n−i​k+12​<i=1∑n−1​k=1∑n​k2​=i=1∑n−1​O(lgn)=O(nlgn)​\"]},\"55\":{\"c\":[\"算法\"]},\"56\":{\"c\":[\"快速排序\"]},\"57\":{\"h\":\"线性时间排序\",\"t\":[\"提示\",\"基于比较的排序算法在最坏情况下至少需要比较 Ω(nlgn) 次\"]},\"58\":{\"h\":\"计数排序\",\"t\":[\"counting_sort(A,n,k) let B[1:n] and C[0:k] be new arrays for i = 0 to k C[i] = 0 for j = 1 to n C[A[j]] = C[A[j]] + 1 // C[i] now contains the number of elements equal to i. for i = 1 to k C[i] = C[i] + C[i - 1] // C[i] now contains the number of elements less than or equal to i // Copy A to B, starting from the end of A for j = n downto 1 B[C[A[j]]] = A[j] C[A[j]] = C[A[j]] - 1 // to handle duplicate values return B\",\"提示\",\"计数排序假定输入是在小范围内的整数\",\"计数排序是稳定排序\",\"时间复杂度为 Θ(n+k)\"]},\"59\":{\"h\":\"基数排序\",\"t\":[\"radix-sort(A,n,d) for i = 1 to d // commonly use counting sort use a stable sort to sort array A[1:n] on digit i\",\"引理1\",\"给定 n 个 d 位数字，每一位有 k 个取值范围，当使用时间复杂度为 Θ(n+k) 的稳定排序算法时，基数排序的时间复杂度为 Θ(d(n+k))\",\"引理2\",\"给定 n 个 b 位二进制数字以及正整数 r≤b，当使用时间复杂度为 Θ(n+k) 的稳定排序算法时，基数排序的时间复杂度为 Θ((b/r)(n+2r))\",\"当 b<⌊lgn⌋ 时，r≤b 表示 (n+2r)=Θ(n)，则选择 r=b 可得时间复杂度 Θ(n) 是渐进最优的\",\"当 b≥⌊lgn⌋ 时，选择 r=⌊lgn⌋，可得时间复杂度 Θ(bn/lgn) 是渐进最优的\"]},\"60\":{\"h\":\"桶排序\",\"t\":[\"bucket_sort(A,n) // 0 ≤ A[i] < 1 let B[0:n-1] be a new array for i = 0 to n - 1 make B[i] an empty list for i = 1 to n insert A[i] into list B[⌊n·A[i]⌋] for i = 0 to n - 1 sort list B[i] with insertion sort concatenate the lists B[0],B[1],...,B[n-1] together in order return the concatenated listss\",\"提示\",\"桶排序假定输入是 [0,1) 内均匀独立分布的数字\",\"平均时间复杂度为 Θ(n)\",\"令随机变量 ni​ 表示落在桶 B[i] 中的数量，则桶排序的运行时间为 T(n)=Θ(n)+∑i=0n−1​O(ni2​), 期望为\",\"E[T(n)]​=E[Θ(n)+i=1∑n−1​O(ni2​)]=Θ(n)+i=0∑n−1​O(E[ni2​])=Θ(n)+n⋅(2−1/n)=Θ(n)​\"]},\"61\":{\"c\":[\"算法\"]},\"62\":{\"c\":[\"计数排序\",\"基数排序\",\"桶排序\"]},\"63\":{\"h\":\"中位数和顺序统计\",\"t\":[\"选择问题\",\"输入：n 个不同的数字和一个整数 i，1 ≤ i ≤ n 输出：第 i 大的元素 x\"]},\"64\":{\"h\":\"最小和最大\",\"t\":[\"MINIMUM(A,n) min = A[1] for i = 2 to n if min > A[i] min = A[i] return min\",\"提示\",\"该算法是最优的，总共使用 n - 1 次比较操作\",\"同时求出最小和最大\",\"最多可以使用 3⌊n/2⌋ 次比较操作，可以同时找到最小和最大值，主要思想为每次取 2 个元素并进行比较，将其中较小值和当前最小值进行比较，将其中较大值和当前最大值进行比较，总共使用 3 次比较。\"]},\"65\":{\"h\":\"期望线性时间选择算法\",\"t\":[\"提示\",\"使用类似于快速排序的分治算法，期望运行时间为 Θ(n)，最坏运行时间为 Θ(n2)\",\"RANDOMIZED-SELECT(A,p,r,i) if p == r return A[p] q = RANDOMIZED-PARTITION(A,p,r) k = q - p + 1 if i == k return A[q] // the pivot value is the answer else if i < k return RANDOMIZED-SELECT(A,p,q-1,i) else return RANDOMIZED-SELECT(A,q+1,r,i-k)\"]},\"66\":{\"h\":\"最坏情况线性时间选择算法\",\"t\":[\"SELECT(A,p,r,i) while (r - p + 1) mod 5 ≠ 0 for j = p + 1 to r // put the minimum into A[p] if A[p] > A[j] exchange A[p] with A[j] // If we want the minimum of A[p:r], we're done. if i == 1 return A[p] // Otherwise, we want the (i-1)st element of A[p+1:r]. p = p + 1 i = i - 1 g = (r - p + 1) / 5 // number of 5-element groups for j = p to p + g - 1 // sort each group sort <A[j], A[j+g], A[j+2g], A[j+3g], A[j+4g]> in place // All group medians now lie in the middle fifth of A[p:r]. x = SELECT(A,p+2g,p+3g-1,⌈g/2⌉) q = PARTITION-AROUND(A,p,r,x) // The rest is just like lines 3-9 of RANDOMIZED-SELECT. k = q - p + 1 if i == k return A[q] else if i < k return SELECT(A,p,q-1,i) else return SELECT(A,q+1,r,i-k)\"]},\"67\":{\"c\":[\"算法\"]},\"68\":{\"c\":[\"中位数\",\"顺序统计\"]},\"69\":{\"h\":\"CUDA\"},\"70\":{\"c\":[\"cuda\"]},\"71\":{\"h\":\"CUDA 编程模型\"},\"72\":{\"h\":\"CPU VS GPU\"},\"73\":{\"h\":\"Kernels\",\"t\":[\"// Kernel 定义 __global__ void VecAdd(float* A, float* B, float* C) { int i = threadIdx.x; C[i] = A[i] + B[i]; } int main() { // Kernel 调用 VecAdd<<<1, N>>>(A, B, C); }\"]},\"74\":{\"h\":\"Thread Hierarchy\",\"t\":[\"// Kernel 定义 __global__ void MatAdd(float A[N][N], float B[N][N], float C[N][N]) { int i = threadIdx.x; int j = threadIdx.y; C[i][j] = A[i][j] + B[i][j]; } int main() { // Kernel 调用 int numBlocks = 1; dim3 threadsPerBlock(N, N); MatAdd<<<numBlocks, threadsPerBlock>>>(A, B, C); }\",\"提示\",\"block 内的所有线程都运行在同一个 SM core 中，并且共享 core 中有限的内存资源，因此每一个 block 的线程数量存在上限。\",\"kernel 可以执行多个 blocks，多个 blocks 可以组成一维、二维或三维 grid 。\",\"扩展 MatAdd 处理多个 blocks，代码如下：\",\"// Kernel 定义 __global__ void MatAdd(float A[N][N], float B[N][N], float C[N][N]) { int i = blockIdx.x * blockDim.x + threadIdx.x; int j = blockIdx.y * blockDim.y + threadIdx.y; if (i < N && j < N) C[i][j] = A[i][j] + B[i][j]; } int main() { // Kernel 调用 dim3 threadsPerBlock(16, 16); dim3 numBlocks(N / threadsPerBlock.x, N / threadsPerBlock.y); MatAdd<<<numBlocks, threadsPerBlock>>>(A, B, C); }\",\"提示\",\"线程 blocks 的执行是独立的，可以是并行或者串行，也可以按任意顺序执行，从而使得 blocks 可以按照任意顺序调度到任意数量的 SM core 中。 \",\"block 内的线程可以通过共享内存分享数据，也可以通过调用 __syncthreads() 进行同步。\"]},\"75\":{\"h\":\"Thread Block Clusters\",\"t\":[\"提示\",\"在 block 和 grid 中间可以增加一层可选的 Thread Block Clusters，cluster 内的所有 blocks 都运行在同一个 GPU Processing Cluster (GPC) 中。 \",\"cluster 内的线程 blocks 可以访问分布式共享内存， 也可以通过 cluster.sync() 进行硬件支持的同步。\",\"编译时指定 cluster size\",\"// Kernel 定义 // 编译时 cluster size __global__ void __cluster_dims__(2, 1, 1) cluster_kernel(float* input, float* output) { } int main() { float* input, *output; // Kernel 调用 dim3 threadsPerBlock(16, 16); dim3 numBlocks(N / threadsPerBlock.x, N / threadsPerBlock.y); // The grid dimension must be a multiple of cluster size. cluster_kernel<<<numBlocks, threadsPerBlock>>>(input, output); }\",\"运行时指定 cluster size\",\"// Kernel 定义 __global__ void cluster_kernel(float* input, float* output) { } int main() { float* input, *output; dim3 threadsPerBlock(16, 16); dim3 numBlocks(N / threadsPerBlock.x, N / threadsPerBlock.y); // Kernel 调用 { cudaLaunchConfig_t config = {0}; config.gridDim = numBlocks; config.blockDim = threadsPerBlock; cudaLaunchAttribute attribute[1]; attribute[0].id = cudaLaunchAttributeClusterDimension; attribute[0].val.clusterDim.x = 2; attribute[0].val.clusterDim.y = 1; attribute[0].val.clusterDim.z = 1; config.attrs = attribute; config.numAttrs = 1; cudaLaunchKernelEx(&config, cluster_kernel, input, output); } }\"]},\"76\":{\"h\":\"Memory Hierarchy\"},\"77\":{\"c\":[\"cuda\"]},\"78\":{\"h\":\"光线追踪\"},\"79\":{\"c\":[\"光线追踪\"]},\"80\":{\"h\":\"蒙特卡洛积分\"},\"81\":{\"h\":\"蒙特卡洛估计\",\"t\":[\"给定 1D 积分 ∫ab​f(x)dx，我们随机采样一组独立的均匀随机变量 Xi​∈[a,b]，蒙特卡洛估计值等于\",\"Fn​=nb−a​i=1∑n​f(Xi​)\",\"期望等于\",\"E[Fn​]​=E[nb−a​i=1∑n​f(Xi​)]=nb−a​i=1∑n​E[f(Xi​)]=nb−a​i=1∑n​∫ab​f(x)p(x)dx=nb−a​i=1∑n​∫ab​f(x)b−a1​dx=n1​i=1∑n​∫ab​f(x)dx=∫ab​f(x)dx​\",\"一般地，如果随机变量根据 PDF p(x) 采样（其中 p(x)>=0），则蒙特卡洛估计值等于\",\"Fn​=n1​i=1∑n​p(Xi​)f(Xi​)​\",\"期望等于\",\"E[Fn​]=∫ab​f(x)dx\"]},\"82\":{\"h\":\"蒙特卡洛估计误差\",\"t\":[\"方差\",\"V[F]=E[F−E[F]]2=E[F2]−E[F]2\",\"V[aF]=a2V[F]\",\"当 F 为蒙特卡洛估计时，方差等于\",\"V[Fn​]​=V[n1​i=1∑n​p(Xi​)f(Xi​)​]=n21​i=1∑n​V[p(Xi​)f(Xi​)​]=n1​V[p(X)f(X)​]​\",\"可见随着采样数量 n 的增长，方差呈线性的下降，又由于方差表示误差的平方，因此蒙特卡洛估计的误差以 O(n−1/2) 的速度下降。\",\"偏差\",\"β=E[F]−∫f(x)dx\",\"如果有偏估计能够比无偏估计更快的收敛到正确的结果，那么有偏估计任然是可取的\",\"均方差\",\"MSE[F]=E[(F−∫f(x)dx)2]\",\"MSE[F]=V[F]+β[F]2\",\"当偏差 β=0 时，均方差等于方差\",\"样本方差\",\"随机采样一组独立的随机变量 Xi​，均值 Xˉ=(1/n)∑Xi​, 则采样方差等于\",\"S=n−11​i=1∑n​(Xi​−Xˉ)2\",\"采样方差可以理解为对样本总体方差的一个无偏估计\"]},\"83\":{\"h\":\"提升蒙特卡洛估计效率\"},\"84\":{\"h\":\"分层采样 Stratified Sampling\",\"t\":[\"基本思想\",\"将积分域 Λ 划分成 n 个不重叠的区域 Λ1​,Λ2​,...,Λn​，且满足 i=1∪n​Λi​=Λ ，我们根据概率 pi​ 从每一个 Λi​ 中随机抽取 ni​ 个样本，则在 Λi​ 内的蒙特卡洛估计值等于\",\"Fi​=ni​1​j=1∑ni​​pi​(Xi,j​)f(Xi,j​)​\",\" TODO\"]},\"85\":{\"h\":\"重要性采样 Importance Sampling\",\"t\":[\"基本思想\",\"当使用和被积函数 f(x) 相似的分布进行采样时，即 p(x)∝f(x) 或 p(x)=cf(x)，蒙特卡洛估计会收敛的更快。\",\"假设令 p(x)=cf(x)，根据 ∫p(x)=1，可得\",\"c=∫f(x)dx1​\",\"此时蒙特卡洛估计的方差等于\",\"V[F]​=n1​V[p(X)f(X)​]=n1​V[c1​]=0​\",\"然后实际上我们并不知道 f(x) 的分布，但是可以使用和 f(x) 相似的分布，从而降低方差 ！\"]},\"86\":{\"h\":\"多重重要性采样 Multiple Importance Sampling（MIS）\",\"t\":[\" TODO\"]},\"87\":{\"h\":\"俄罗斯轮盘 Russian Roulette\",\"t\":[\"基本思想\",\"对于形如 f(X)v(X) 的被积函数，其中 f(x) 很容易评估而 v(X) 计算很复杂，当 f(x) 很小时我们可以跳过整个的计算，但会引入偏差，俄罗斯轮盘正是用于解决该问题的。\",\"使用俄罗斯轮盘的蒙特卡洛估计等于\",\"F′=⎩⎨⎧​​1−qF−qc​c​\",\"通常 c=0，期望\",\"E[F′]=(1−q)(1−qE[F]−qc​)+qc=E[F]\",\"使用俄罗斯轮盘总是会增加方差\"]},\"88\":{\"h\":\"划分 Splitting\",\"t\":[\" TODO\"]},\"89\":{\"c\":[\"光线追踪\"]},\"90\":{\"c\":[\"蒙特卡洛积分\"]},\"91\":{\"h\":\"实时渲染\"},\"92\":{\"c\":[\"实时渲染\"]},\"93\":{\"h\":\"光栅化\"},\"94\":{\"h\":\"光栅化线段 (Bresenhan Line Algorithm)\",\"t\":[\"规则\",\"diamond-exit rule\",\"对于每一个像素点，如果线段和该像素点内的钻石区域相交并且从该区域内穿出即（exit），则着色该像素点； 因此如果线段终点在像素钻石区域内，但没有穿出的话，那么也不着色该像素点，这样保证当有两段连续的线段连接在一起的时候，连接处的像素点只会绘制一次。\"]},\"95\":{\"h\":\"光栅化三角形\",\"t\":[\"提示\",\"采样判断每一个像素的中心是否在三角形内\",\"for (int x = xmin; x < xmax; ++x) for (int y = ymin; y < ymax; ++y) image[x][y] = inside(tri, x + 0.5, y + 0.5);\",\"如何判断点在三角形内？\",\"(ac×ab)⋅(ac×aq​)>0\",\"同理有\",\"(cb×ca)⋅(cb×cq​)>0(ba×bc)⋅(ba×bq​)>0​\",\"警告\",\"下面是一个种更简单的判断方法，不过三角形的顶点 A → B → C 必须是逆时针顺序（左右手坐标系都适用）！\",\"[ab×aq​]z​>0[bc×bq​]z​>0[ca×cq​]z​>0​\"]},\"96\":{\"h\":\"重心坐标计算\",\"t\":[\"假设 P 是三角形 ABC 内一点，有\",\"xp​yp​1​=αxa​+βxb​+γxc​=αya​+βyb​+γyc​=α+β+γ​\",\"可得\",\"αβγ​=(xa​−xc​)(yb​−yc​)−(xb​−xc​)(ya​−yc​)(xp​−xc​)(yb​−yc​)−(xb​−xc​)(yp​−yc​)​=(xb​−xc​)(ya​−yc​)−(xa​−xc​)(yb​−yc​)(xp​−xc​)(ya​−yc​)−(xa​−xc​)(yp​−yc​)​=1−α−β​\"]},\"97\":{\"h\":\"透视正确插值\",\"t\":[\"三角形 ABC 根据透视投影矩阵 M 变换到 A'B'C'\",\"(A′wa​wa​​)(B′wb​wb​​)(C′wc​wc​​)(P′wp​wp​​)​=M(A1​)=M(B1​)=M(C1​)=M(P1​)​\",\"P 和 P' 分别是三角形 ABC 和 A'B'C' 内的一点，有\",\"PP′​=αA+βB+γC=α′A′+β′B′+γ′C′​\",\"且\",\"α+β+γα′+β′+γ′​=1=1​\",\"结合 1 和 2 可得\",\"(P1​)M(P1​)P′wp​wp​​=α(A1​)+β(B1​)+γ(C1​)=Mα(A1​)+Mβ(B1​)+Mγ(C1​)=αA′wa​+βB′wb​+γC′wc​=αwa​+βwb​+γwc​​\",\"则\",\"P′​=αwa​+βwb​+γwc​αA′wa​+βB′wb​+γC′wc​​=αwa​+βwb​+γwc​αwa​​A′+αwa​+βwb​+γwc​βwb​​B′+αwa​+βwb​+γwc​γwc​​C′=α′A′+β′B′+γ′C′​\",\"从而有\",\"α′β′γ′​=αwa​+βwb​+γwc​αwa​​=αwa​+βwb​+γwc​βwb​​=αwa​+βwb​+γwc​γwc​​​\",\"令\",\"k=αwa​+βwb​+γwc​1​\",\"可得\",\"αβγ​=wa​kα′​=wb​kβ′​=wc​kγ′​​\",\"又\",\"1=α+β+γ=wa​kα′​+wb​kβ′​+wc​kγ′​\",\"可得\",\"kαβγ​=wa​α′​+wb​β′​+wc​γ′​=wa​α′​+wb​β′​+wc​γ′​wa​α′​​=wa​α′​+wb​β′​+wc​γ′​wb​β′​​=wa​α′​+wb​β′​+wc​γ′​wc​γ′​​​\"]},\"98\":{\"c\":[\"实时渲染\"]},\"99\":{\"c\":[\"光栅化\"]},\"100\":{\"h\":\"着色基础\"},\"101\":{\"h\":\"概览\"},\"102\":{\"h\":\"光源\"},\"103\":{\"h\":\"方向光\"},\"104\":{\"h\":\"点光源\"},\"105\":{\"h\":\"聚光灯\"},\"106\":{\"h\":\"着色模型\"},\"107\":{\"h\":\"Ambient\",\"t\":[\"La​=ka​Ia​\"]},\"108\":{\"h\":\"Lambertian\",\"t\":[\"Ld​=kd​Id​max(0,n⋅l)\"]},\"109\":{\"h\":\"Blinn-Phong\",\"t\":[\"Ls​=ks​Is​max(0,n⋅h)p\",\"其中 h 是半程向量，定义为\",\"h=∥v+l∥v+l​\"]},\"110\":{\"c\":[\"实时渲染\"]},\"111\":{\"c\":[\"着色模型\"]},\"112\":{\"h\":\"纹理\"},\"113\":{\"h\":\"纹理放大\"},\"114\":{\"h\":\"最近邻采样\"},\"115\":{\"h\":\"双线性插值采样\"},\"116\":{\"h\":\"纹理缩小\"},\"117\":{\"h\":\"Mipmapping\"},\"118\":{\"c\":[\"实时渲染\"]},\"119\":{\"c\":[\"纹理\"]},\"120\":{\"h\":\"坐标变换\"},\"121\":{\"h\":\"线性代数基础\",\"t\":[\"任意 n 阶段矩阵 M 可以看成由 n 个列向量 c1 c2 ... cn 组成：\",\"M=[c1​​c2​​...​cn​​]\",\"将这 n 个列向量进行线性变换后所能表示的向量记为 v 有：\",\"v=k1​c1​+k2​c2​+...+kn​cn​\",\"所有 v 构成的向量空间记为 R\",\"相关信息\"]},\"122\":{\"h\":\"秩\",\"t\":[\"表示由矩阵的列向量所能构成的向量所组成的向量空间 R 的维度\"]},\"123\":{\"h\":\"行列式\",\"t\":[\"表示该矩阵对空间进行变换的缩放程度，例如，2 阶矩阵表示面积的缩放，3 阶矩阵表示体积的缩放 如果行列式为 0，表示该矩阵变换进行了降维操作(即秩⬇)，因此此时矩阵不可逆 如果行列式 < 0，表示该矩阵变换进行了翻转操作\"]},\"124\":{\"h\":\"基本变换\",\"t\":[\"线性变换定义\",\"f(x)+f(y)kf(x)​=f(x+y)=f(kx)​\",\"对于任意矩阵 M 以及向量 x y 满足： Mx + My = M(x+y) kM(x) = M(kx) 因此 M 也满足线性变换\"]},\"125\":{\"h\":\"平移\",\"t\":[\"T(t)=T(tx​,ty​,tz​)=​1000​0100​0010​tx​ty​tz​1​​\"]},\"126\":{\"h\":\"旋转\",\"t\":[\"Rx​(ϕ)=​1000​0cosϕsinϕ0​0−sinϕcosϕ0​0001​​\",\"Ry​(ϕ)=​cosϕ0−sinϕ0​0100​sinϕ0cosϕ0​0001​​\",\"Rz​(ϕ)=​cosϕsinϕ00​−sinϕcosϕ00​0010​0001​​\",\"定理\",\"任意 3x3 旋转矩阵都是标准正交矩阵，且行列式等于 1\"]},\"127\":{\"h\":\"推导\",\"t\":[\"给定由一组标准正交基所组成的矩阵 A 以及任意 3x3 旋转矩阵 R，其旋转之后仍然是一组标准正交基，可得：\",\"(RA)(RA)T=RAATRT=RRT=I\"]},\"128\":{\"h\":\"缩放\",\"t\":[\"S(s)=​sx​000​0sy​00​00sz​0​0001​​\"]},\"129\":{\"h\":\"剪切\",\"t\":[\"Hxz​(s)=​1000​0100​s010​0001​​\"]},\"130\":{\"h\":\"法线变换\",\"t\":[\"记 n 和 t 为变换前的法线和切线，n' 和 t' 为变换后的法线和切线，M 为顶点变换矩阵，S 为法线变换矩阵\",\"n′Tt′=(Sn)T(Mt)=nTSTMt=0=nTt​\",\"则\",\"STM=I⇒S=(M−1)T\",\"当 M 只包含旋转和统一缩放变换时，S = M\"]},\"131\":{\"h\":\"视图变换\",\"t\":[\"如图，假定相机位置在 c，单位向量 r，u，v 表示相机的旋转朝向\",\"提示\",\"由于相机和物体之间的相对位置是固定不变的，我们可以先对整体一起进行矩阵变换，使得相机位于原点且朝向从 <r，u，v> 变换为 <x，y，z> （当然也可以变换为 x，y，-z）\",\"先将相机平移到原点\",\"Tview​=​1000​0100​0010​−tx​−ty​−tz​1​​\",\"将朝向从 <r，u，v> 变换为 <x，y，z>\",\"提示\",\"可以单独考虑每个向量，我们希望通过一个旋转矩阵变换将 r → x（<1,0,0>）, u → y（<0,1,0>）, v → z（<0,0,1>），因为 r，u，v 是标准正交向量，所以 r·r = u·u = v·v = 1，且两两之间的点积为 0\",\"综上，可以推导出对应的旋转矩阵\",\"Rview​=​rTuTvT0​0001​​=​rx​ux​vx​0​ry​uy​vy​0​rz​uz​vz​0​0001​​\",\"视图变换矩阵\",\"Mview​=Rview​Tview​​=​rx​ux​vx​0​ry​uy​vy​0​rz​uz​vz​0​0001​​​1000​0100​0010​−tx​−ty​−tz​1​​=​rx​ux​vx​0​ry​uy​vy​0​rz​uz​vz​0​−t⋅r−t⋅u−t⋅v1​​​\"]},\"132\":{\"h\":\"投影矩阵\"},\"133\":{\"h\":\"正交投影\",\"t\":[\"提示\",\"正交投影的目标是将由（l,r,b,t,n,f）所表示的 AABB 变换到以原点为中心的标准 AABB，在 OpenGL 中标准 AABB 为 (-1,-1,-1) - (1,1,1)，在 DirectX 中标准 AABB 为 (-1,-1,0) - (1,1,1)\",\"注意\",\"上图中相机看向 -z 的方向，因此有 0 > n > f； 如果相机看向 +z 的方向，那么 0 < n < f，并且投影矩阵公式也会有所不同，以下公式推导基于相机看向 +z 方向\"]},\"134\":{\"h\":\"OpenGL\",\"t\":[\"Po[−1,1]​=S(s)T(t)​=​r−l2​000​0t−b2​00​00f−n2​0​0001​​​1000​0100​0010​−2l+r​−2b+t​−2n+f​1​​=​r−l2​000​0t−b2​00​00f−n2​0​l−rl+r​b−tb+t​n−fn+f​1​​​\"]},\"135\":{\"h\":\"DirectX\",\"t\":[\"Po[0,1]​=Mst​Po[−1,1]​​=​1000​0100​000.50​000.51​​​r−l2​000​0t−b2​00​00f−n2​0​l−rl+r​b−tb+t​n−fn+f​1​​=​r−l2​000​0t−b2​00​00f−n1​0​l−rl+r​b−tb+t​n−fn​1​​​\"]},\"136\":{\"h\":\"透视投影\",\"t\":[\"提示\",\"透视投影的目标是将由（l,r,b,t,n,f）所表示的视锥体变换到以原点为中心的标准 AABB，在 OpenGL 中标准 AABB 为 (-1,-1,-1) - (1,1,1)，在 DirectX 中标准 AABB 为 (-1,-1,0) - (1,1,1)\",\"注意\",\"上图中相机看向 -z 的方向，因此有 0 > n > f； 如果相机看向 +z 的方向，那么 0 < n < f，并且投影矩阵公式也会有所不同，以下公式推导基于相机看向 -z 方向\",\"直接计算这个变化有困难，可以考虑分成两步\",\"第一步\",\"将由（l,r,b,t,n,f）所表示的视锥体变换到由（l,r,b,t,n,f）所表示的 AABB，即把视锥体往中间压缩成一个长方体，且保持近平面和远平面的距离不变\"]},\"137\":{\"c\":[\"实时渲染\"]},\"138\":{\"c\":[\"坐标变换\"]},\"139\":{\"h\":\"\",\"t\":[\"404 Not Found\"]}},\"dirtCount\":0,\"index\":[[\"直接计算这个变化有困难\",{\"1\":{\"136\":1}}],[\"透视投影的目标是将由\",{\"1\":{\"136\":1}}],[\"透视投影\",{\"0\":{\"136\":1}}],[\"透视正确插值\",{\"0\":{\"97\":1}}],[\"以下公式推导基于相机看向\",{\"1\":{\"133\":1,\"136\":1}}],[\"以及任意\",{\"1\":{\"127\":1}}],[\"以及向量\",{\"1\":{\"124\":1}}],[\"上图中相机看向\",{\"1\":{\"133\":1,\"136\":1}}],[\"注意\",{\"1\":{\"133\":1,\"136\":1}}],[\"正交投影的目标是将由\",{\"1\":{\"133\":1}}],[\"正交投影\",{\"0\":{\"133\":1}}],[\"投影矩阵\",{\"0\":{\"132\":1}}],[\"投进每个桶中的概率都相等为\",{\"1\":{\"36\":1}}],[\"所表示的视锥体变换到由\",{\"1\":{\"136\":1}}],[\"所表示的视锥体变换到以原点为中心的标准\",{\"1\":{\"136\":1}}],[\"所表示的\",{\"1\":{\"133\":1,\"136\":1}}],[\"所以\",{\"1\":{\"131\":1}}],[\"所有\",{\"1\":{\"121\":1}}],[\"因为\",{\"1\":{\"131\":1}}],[\"因此有\",{\"1\":{\"133\":1,\"136\":1}}],[\"因此此时矩阵不可逆\",{\"1\":{\"123\":1}}],[\"因此如果线段终点在像素钻石区域内\",{\"1\":{\"94\":1}}],[\"因此蒙特卡洛估计的误差以\",{\"1\":{\"82\":1}}],[\"因此每一个\",{\"1\":{\"74\":1}}],[\"因此\",{\"1\":{\"36\":1,\"53\":1,\"124\":1}}],[\"先将相机平移到原点\",{\"1\":{\"131\":1}}],[\"变换为\",{\"1\":{\"131\":2}}],[\"变换到以原点为中心的标准\",{\"1\":{\"133\":1}}],[\"变换到\",{\"1\":{\"97\":1}}],[\"由于相机和物体之间的相对位置是固定不变的\",{\"1\":{\"131\":1}}],[\"单位向量\",{\"1\":{\"131\":1}}],[\"单个事件的期望是\",{\"1\":{\"32\":1}}],[\"视图变换矩阵\",{\"1\":{\"131\":1}}],[\"视图变换\",{\"0\":{\"131\":1}}],[\"只包含旋转和统一缩放变换时\",{\"1\":{\"130\":1}}],[\"只要\",{\"1\":{\"22\":1}}],[\"为\",{\"1\":{\"133\":2,\"136\":2}}],[\"为法线变换矩阵\",{\"1\":{\"130\":1}}],[\"为顶点变换矩阵\",{\"1\":{\"130\":1}}],[\"为变换后的法线和切线\",{\"1\":{\"130\":1}}],[\"为变换前的法线和切线\",{\"1\":{\"130\":1}}],[\"为蒙特卡洛估计时\",{\"1\":{\"82\":1}}],[\"记\",{\"1\":{\"130\":1}}],[\"记数组\",{\"1\":{\"33\":1}}],[\"法线变换\",{\"0\":{\"130\":1}}],[\"剪切\",{\"0\":{\"129\":1}}],[\"缩放\",{\"0\":{\"128\":1}}],[\"ϕ\",{\"1\":{\"126\":3}}],[\"旋转矩阵\",{\"1\":{\"127\":1}}],[\"旋转矩阵都是标准正交矩阵\",{\"1\":{\"126\":1}}],[\"旋转\",{\"0\":{\"126\":1}}],[\"平移\",{\"0\":{\"125\":1}}],[\"平均时间复杂度为\",{\"1\":{\"60\":1}}],[\"平均期望需要投多少个球\",{\"1\":{\"36\":2}}],[\"阶矩阵表示体积的缩放\",{\"1\":{\"123\":1}}],[\"阶矩阵表示面积的缩放\",{\"1\":{\"123\":1}}],[\"阶段矩阵\",{\"1\":{\"121\":1}}],[\"行列式\",{\"0\":{\"123\":1}}],[\"秩\",{\"0\":{\"122\":1}}],[\"构成的向量空间记为\",{\"1\":{\"121\":1}}],[\"构造堆\",{\"0\":{\"42\":1}}],[\"组成\",{\"1\":{\"121\":1}}],[\"任意\",{\"1\":{\"121\":1,\"126\":1}}],[\"坐标变换\",{\"0\":{\"120\":1},\"2\":{\"138\":1}}],[\"双线性插值采样\",{\"0\":{\"115\":1}}],[\"纹理缩小\",{\"0\":{\"116\":1}}],[\"纹理放大\",{\"0\":{\"113\":1}}],[\"纹理\",{\"0\":{\"112\":1},\"2\":{\"119\":1}}],[\"着色模型\",{\"0\":{\"106\":1},\"2\":{\"111\":1}}],[\"着色基础\",{\"0\":{\"100\":1}}],[\"聚光灯\",{\"0\":{\"105\":1}}],[\"点光源\",{\"0\":{\"104\":1}}],[\"方向\",{\"1\":{\"133\":1,\"136\":1}}],[\"方向光\",{\"0\":{\"103\":1}}],[\"方差呈线性的下降\",{\"1\":{\"82\":1}}],[\"方差等于\",{\"1\":{\"82\":1}}],[\"方差\",{\"1\":{\"82\":1}}],[\"概览\",{\"0\":{\"101\":1}}],[\"概率\",{\"2\":{\"38\":1}}],[\"概率分析示例\",{\"0\":{\"34\":1}}],[\"概率分析和随机化算法\",{\"0\":{\"28\":1}}],[\"γ\",{\"1\":{\"97\":1}}],[\"β\",{\"1\":{\"97\":1}}],[\"β=0\",{\"1\":{\"82\":1}}],[\"β=e\",{\"1\":{\"82\":1}}],[\"结合\",{\"1\":{\"97\":1}}],[\"α\",{\"1\":{\"97\":1}}],[\"α+β+γα\",{\"1\":{\"97\":1}}],[\"αβγ​=wa​kα\",{\"1\":{\"97\":1}}],[\"αβγ​=\",{\"1\":{\"96\":1}}],[\"三角形\",{\"1\":{\"97\":1}}],[\"重心坐标计算\",{\"0\":{\"96\":1}}],[\"重要性采样\",{\"0\":{\"85\":1}}],[\"左右手坐标系都适用\",{\"1\":{\"95\":1}}],[\"必须是逆时针顺序\",{\"1\":{\"95\":1}}],[\"→\",{\"1\":{\"95\":2,\"131\":3}}],[\"不过三角形的顶点\",{\"1\":{\"95\":1}}],[\"下面是一个种更简单的判断方法\",{\"1\":{\"95\":1}}],[\"下面我们使用替换法来计算以下这个递归的时间复杂度\",{\"1\":{\"22\":1}}],[\"警告\",{\"1\":{\"95\":1}}],[\"⋅\",{\"1\":{\"95\":3}}],[\"如图\",{\"1\":{\"131\":1}}],[\"如何判断点在三角形内\",{\"1\":{\"95\":1}}],[\"如果相机看向\",{\"1\":{\"133\":1,\"136\":1}}],[\"如果行列式\",{\"1\":{\"123\":1}}],[\"如果行列式为\",{\"1\":{\"123\":1}}],[\"如果线段和该像素点内的钻石区域相交并且从该区域内穿出即\",{\"1\":{\"94\":1}}],[\"如果有偏估计能够比无偏估计更快的收敛到正确的结果\",{\"1\":{\"82\":1}}],[\"如果随机变量根据\",{\"1\":{\"81\":1}}],[\"如果存在k\",{\"1\":{\"24\":1}}],[\"如果存在ε>0使得\",{\"1\":{\"24\":2}}],[\"连接处的像素点只会绘制一次\",{\"1\":{\"94\":1}}],[\"规则\",{\"1\":{\"94\":1}}],[\"光源\",{\"0\":{\"102\":1}}],[\"光栅化三角形\",{\"0\":{\"95\":1}}],[\"光栅化线段\",{\"0\":{\"94\":1}}],[\"光栅化\",{\"0\":{\"93\":1},\"2\":{\"99\":1}}],[\"光线追踪\",{\"0\":{\"78\":1},\"2\":{\"79\":1,\"89\":1}}],[\"实时渲染\",{\"0\":{\"91\":1},\"2\":{\"92\":1,\"98\":1,\"110\":1,\"118\":1,\"137\":1}}],[\"划分\",{\"0\":{\"88\":1}}],[\"划分成\",{\"1\":{\"84\":1}}],[\"通常\",{\"1\":{\"87\":1}}],[\"通过概率分析可以计算出平均情况时间复杂度\",{\"1\":{\"29\":1}}],[\"但没有穿出的话\",{\"1\":{\"94\":1}}],[\"但会引入偏差\",{\"1\":{\"87\":1}}],[\"但是可以使用和\",{\"1\":{\"85\":1}}],[\"计算很复杂\",{\"1\":{\"87\":1}}],[\"计数排序是稳定排序\",{\"1\":{\"58\":1}}],[\"计数排序假定输入是在小范围内的整数\",{\"1\":{\"58\":1}}],[\"计数排序\",{\"0\":{\"58\":1},\"2\":{\"62\":1}}],[\"很小时我们可以跳过整个的计算\",{\"1\":{\"87\":1}}],[\"很容易评估而\",{\"1\":{\"87\":1}}],[\"很多情况下\",{\"1\":{\"33\":1}}],[\"俄罗斯轮盘正是用于解决该问题的\",{\"1\":{\"87\":1}}],[\"俄罗斯轮盘\",{\"0\":{\"87\":1}}],[\"多重重要性采样\",{\"0\":{\"86\":1}}],[\"多个\",{\"1\":{\"74\":1}}],[\"然后实际上我们并不知道\",{\"1\":{\"85\":1}}],[\"此时蒙特卡洛估计的方差等于\",{\"1\":{\"85\":1}}],[\"∫p\",{\"1\":{\"85\":1}}],[\"∫ab​f\",{\"1\":{\"81\":1}}],[\"或\",{\"1\":{\"85\":1}}],[\"或元素\",{\"1\":{\"54\":1}}],[\"∝f\",{\"1\":{\"85\":1}}],[\"相似的分布\",{\"1\":{\"85\":1}}],[\"相似的分布进行采样时\",{\"1\":{\"85\":1}}],[\"相关信息\",{\"1\":{\"51\":1,\"121\":1}}],[\"从每一个\",{\"1\":{\"84\":1}}],[\"从而有\",{\"1\":{\"97\":1}}],[\"从而降低方差\",{\"1\":{\"85\":1}}],[\"从而降低了总的时间复杂度\",{\"1\":{\"20\":1}}],[\"从而使得\",{\"1\":{\"74\":1}}],[\"且保持近平面和远平面的距离不变\",{\"1\":{\"136\":1}}],[\"且两两之间的点积为\",{\"1\":{\"131\":1}}],[\"且行列式等于\",{\"1\":{\"126\":1}}],[\"且\",{\"1\":{\"97\":1}}],[\"且满足\",{\"1\":{\"84\":1}}],[\"且对于任意大n满足f\",{\"1\":{\"24\":1}}],[\"λi​\",{\"1\":{\"84\":2}}],[\"λn​\",{\"1\":{\"84\":1}}],[\"λ2​\",{\"1\":{\"84\":1}}],[\"λ1​\",{\"1\":{\"84\":1}}],[\"λ\",{\"1\":{\"84\":1}}],[\"分别是三角形\",{\"1\":{\"97\":1}}],[\"分层采样\",{\"0\":{\"84\":1}}],[\"分治\",{\"0\":{\"17\":1,\"19\":1},\"2\":{\"27\":1}}],[\"提升蒙特卡洛估计效率\",{\"0\":{\"83\":1}}],[\"提示\",{\"1\":{\"20\":1,\"22\":1,\"24\":1,\"25\":1,\"29\":1,\"33\":1,\"57\":1,\"58\":1,\"60\":1,\"64\":1,\"65\":1,\"74\":2,\"75\":1,\"95\":1,\"131\":2,\"133\":1,\"136\":1}}],[\"∑xi​\",{\"1\":{\"82\":1}}],[\"均值\",{\"1\":{\"82\":1}}],[\"均方差等于方差\",{\"1\":{\"82\":1}}],[\"均方差\",{\"1\":{\"82\":1}}],[\"样本方差\",{\"1\":{\"82\":1}}],[\"那么\",{\"1\":{\"133\":1,\"136\":1}}],[\"那么也不着色该像素点\",{\"1\":{\"94\":1}}],[\"那么有偏估计任然是可取的\",{\"1\":{\"82\":1}}],[\"那么总得期望就是\",{\"1\":{\"32\":1}}],[\"−1\",{\"1\":{\"134\":1,\"135\":1}}],[\"−\",{\"1\":{\"96\":4}}],[\"−qc​\",{\"1\":{\"87\":1}}],[\"−∫f\",{\"1\":{\"82\":1}}],[\"−e\",{\"1\":{\"82\":1}}],[\"偏差\",{\"1\":{\"82\":1}}],[\"采样判断每一个像素的中心是否在三角形内\",{\"1\":{\"95\":1}}],[\"采样方差可以理解为对样本总体方差的一个无偏估计\",{\"1\":{\"82\":1}}],[\"采样\",{\"1\":{\"81\":1}}],[\"一般地\",{\"1\":{\"81\":1}}],[\"一般使用期望运行时间来描述随机化算法运行复杂度\",{\"1\":{\"33\":1}}],[\"积分\",{\"1\":{\"81\":1}}],[\"蒙特卡洛估计会收敛的更快\",{\"1\":{\"85\":1}}],[\"蒙特卡洛估计误差\",{\"0\":{\"82\":1}}],[\"蒙特卡洛估计值等于\",{\"1\":{\"81\":1}}],[\"蒙特卡洛估计\",{\"0\":{\"81\":1}}],[\"蒙特卡洛积分\",{\"0\":{\"80\":1},\"2\":{\"90\":1}}],[\"运行时指定\",{\"1\":{\"75\":1}}],[\"进行硬件支持的同步\",{\"1\":{\"75\":1}}],[\"进行同步\",{\"1\":{\"74\":1}}],[\"都运行在同一个\",{\"1\":{\"75\":1}}],[\"都有一个排名\",{\"1\":{\"29\":1}}],[\"在\",{\"1\":{\"75\":1,\"133\":2,\"136\":2}}],[\"在随机快速排序的执行过程中\",{\"1\":{\"54\":2}}],[\"也满足线性变换\",{\"1\":{\"124\":1}}],[\"也可以通过\",{\"1\":{\"75\":1}}],[\"也可以通过调用\",{\"1\":{\"74\":1}}],[\"也可以按任意顺序执行\",{\"1\":{\"74\":1}}],[\"也符合几何分布且概率\",{\"1\":{\"36\":1}}],[\"线性变换定义\",{\"1\":{\"124\":1}}],[\"线性代数基础\",{\"0\":{\"121\":1}}],[\"线性时间排序\",{\"0\":{\"57\":1}}],[\"线程\",{\"1\":{\"74\":1}}],[\"代码如下\",{\"1\":{\"74\":1}}],[\"代价是4次矩阵加法增加到18次\",{\"1\":{\"20\":1}}],[\"处理多个\",{\"1\":{\"74\":1}}],[\"扩展\",{\"1\":{\"74\":1}}],[\"二维或三维\",{\"1\":{\"74\":1}}],[\"内一点\",{\"1\":{\"96\":1}}],[\"内的一点\",{\"1\":{\"97\":1}}],[\"内的蒙特卡洛估计值等于\",{\"1\":{\"84\":1}}],[\"内的线程\",{\"1\":{\"75\":1}}],[\"内的线程可以通过共享内存分享数据\",{\"1\":{\"74\":1}}],[\"内的所有\",{\"1\":{\"75\":1}}],[\"内的所有线程都运行在同一个\",{\"1\":{\"74\":1}}],[\"内均匀独立分布的数字\",{\"1\":{\"60\":1}}],[\"yp​−yc​\",{\"1\":{\"96\":2}}],[\"ya​−yc​\",{\"1\":{\"96\":3}}],[\"yb​−yc​\",{\"1\":{\"96\":3}}],[\"ymax\",{\"1\":{\"95\":1}}],[\"ymin\",{\"1\":{\"95\":1}}],[\"y\",{\"1\":{\"74\":5,\"75\":3,\"95\":4,\"124\":2,\"131\":4}}],[\"调用\",{\"1\":{\"73\":1,\"74\":2,\"75\":2}}],[\"v>\",{\"1\":{\"131\":2}}],[\"v=k1​c1​+k2​c2​+\",{\"1\":{\"121\":1}}],[\"v\",{\"1\":{\"82\":3,\"85\":1,\"87\":2,\"121\":2,\"131\":5}}],[\"val\",{\"1\":{\"75\":3}}],[\"value\",{\"1\":{\"65\":1}}],[\"values\",{\"1\":{\"58\":1}}],[\"vecadd<<<1\",{\"1\":{\"73\":1}}],[\"vecadd\",{\"1\":{\"73\":1}}],[\"void\",{\"1\":{\"73\":1,\"74\":2,\"75\":2}}],[\"vs\",{\"0\":{\"72\":1}}],[\"编译时\",{\"1\":{\"75\":1}}],[\"编译时指定\",{\"1\":{\"75\":1}}],[\"编程模型\",{\"0\":{\"71\":1}}],[\"编号\",{\"1\":{\"29\":1}}],[\"顺序统计\",{\"2\":{\"68\":1}}],[\"顺序来面试\",{\"1\":{\"33\":1}}],[\"51​​​r−l2​000​0t−b2​00​00f−n2​0​l−rl+r​b−tb+t​n−fn+f​1​​=​r−l2​000​0t−b2​00​00f−n1​0​l−rl+r​b−tb+t​n−fn​1​​​\",{\"1\":{\"135\":1}}],[\"50​000\",{\"1\":{\"135\":1}}],[\"5\",{\"1\":{\"66\":3,\"95\":2}}],[\"主要思想为每次取\",{\"1\":{\"64\":1}}],[\"主方法\",{\"0\":{\"24\":1}}],[\"同理有\",{\"1\":{\"95\":1}}],[\"同时求出最小和最大\",{\"1\":{\"64\":1}}],[\"同样使用以下这个递归来演示递归树法是如何计算时间复杂度的\",{\"1\":{\"23\":1}}],[\"总共使用\",{\"1\":{\"64\":2}}],[\"该算法是最优的\",{\"1\":{\"64\":1}}],[\"大的元素\",{\"1\":{\"63\":1}}],[\"输出\",{\"1\":{\"63\":1}}],[\"输入\",{\"1\":{\"63\":1}}],[\"桶排序假定输入是\",{\"1\":{\"60\":1}}],[\"桶排序\",{\"0\":{\"60\":1},\"2\":{\"62\":1}}],[\"选择问题\",{\"1\":{\"63\":1}}],[\"选择\",{\"1\":{\"59\":1}}],[\"选择排序\",{\"0\":{\"5\":1}}],[\"位二进制数字以及正整数\",{\"1\":{\"59\":1}}],[\"位数字\",{\"1\":{\"59\":1}}],[\"给定由一组标准正交基所组成的矩阵\",{\"1\":{\"127\":1}}],[\"给定\",{\"1\":{\"59\":2,\"81\":1}}],[\"给定样本空间\",{\"1\":{\"30\":2}}],[\"次比较\",{\"1\":{\"64\":1}}],[\"次比较操作\",{\"1\":{\"64\":2}}],[\"次\",{\"1\":{\"57\":1}}],[\"次循环中选择\",{\"1\":{\"33\":1}}],[\"次循环之后数组\",{\"1\":{\"33\":1}}],[\"次循环之后\",{\"1\":{\"33\":3}}],[\"定理\",{\"1\":{\"54\":1,\"126\":1}}],[\"定义为\",{\"1\":{\"30\":1,\"109\":1}}],[\"定义\",{\"0\":{\"11\":1,\"12\":1,\"13\":1,\"14\":1,\"15\":1},\"1\":{\"73\":1,\"74\":2,\"75\":2}}],[\"没有两个元素之间会比较两次\",{\"1\":{\"54\":1}}],[\"另外\",{\"1\":{\"54\":1}}],[\"被选为\",{\"1\":{\"54\":1}}],[\"之间会进行比较的概率是\",{\"1\":{\"54\":1}}],[\"之间会进行比较\",{\"1\":{\"54\":1}}],[\"和\",{\"1\":{\"75\":1,\"97\":3,\"130\":2}}],[\"和元素\",{\"1\":{\"54\":2}}],[\"和事件\",{\"1\":{\"30\":2}}],[\"z>\",{\"1\":{\"131\":2}}],[\"z​>0​\",{\"1\":{\"95\":1}}],[\"z​>0\",{\"1\":{\"95\":2}}],[\"z\",{\"1\":{\"75\":1,\"131\":2,\"133\":1,\"136\":2}}],[\"zij​\",{\"1\":{\"54\":4}}],[\"zi​\",{\"1\":{\"54\":8}}],[\"zj​\",{\"1\":{\"54\":8}}],[\"z1​<z2​<\",{\"1\":{\"54\":2}}],[\"元素\",{\"1\":{\"54\":2}}],[\"期望\",{\"1\":{\"87\":1}}],[\"期望等于\",{\"1\":{\"81\":2}}],[\"期望线性时间选择算法\",{\"0\":{\"65\":1}}],[\"期望为\",{\"1\":{\"60\":1}}],[\"期望运行时间为\",{\"1\":{\"65\":1}}],[\"期望运行时间\",{\"0\":{\"54\":1}}],[\"期望多少人情况下\",{\"1\":{\"35\":1}}],[\"又由于方差表示误差的平方\",{\"1\":{\"82\":1}}],[\"又\",{\"1\":{\"53\":1,\"97\":1}}],[\"又令\",{\"1\":{\"36\":1}}],[\"9n\",{\"1\":{\"51\":1}}],[\"9\",{\"1\":{\"51\":1,\"66\":1}}],[\"可见随着采样数量\",{\"1\":{\"82\":1}}],[\"可以考虑分成两步\",{\"1\":{\"136\":1}}],[\"可以推导出对应的旋转矩阵\",{\"1\":{\"131\":1}}],[\"可以单独考虑每个向量\",{\"1\":{\"131\":1}}],[\"可以看成由\",{\"1\":{\"121\":1}}],[\"可以访问分布式共享内存\",{\"1\":{\"75\":1}}],[\"可以按照任意顺序调度到任意数量的\",{\"1\":{\"74\":1}}],[\"可以是并行或者串行\",{\"1\":{\"74\":1}}],[\"可以组成一维\",{\"1\":{\"74\":1}}],[\"可以执行多个\",{\"1\":{\"74\":1}}],[\"可以同时找到最小和最大值\",{\"1\":{\"64\":1}}],[\"可以将整个投球过程分为\",{\"1\":{\"36\":1}}],[\"可得时间复杂度\",{\"1\":{\"59\":2}}],[\"可得\",{\"1\":{\"50\":1,\"51\":1,\"53\":1,\"85\":1,\"96\":1,\"97\":3,\"127\":1}}],[\"u\",{\"1\":{\"131\":7}}],[\"use\",{\"1\":{\"59\":2}}],[\"up\",{\"1\":{\"49\":1}}],[\"underflow\",{\"1\":{\"45\":1}}],[\"快速排序的运行时间是\",{\"1\":{\"54\":1}}],[\"快速排序\",{\"0\":{\"48\":1,\"49\":1},\"2\":{\"56\":1}}],[\"∞\",{\"1\":{\"45\":1}}],[\"优先级队列\",{\"0\":{\"45\":1},\"2\":{\"47\":1}}],[\"并且投影矩阵公式也会有所不同\",{\"1\":{\"133\":1,\"136\":1}}],[\"并且共享\",{\"1\":{\"74\":1}}],[\"并且在任一高度\",{\"1\":{\"43\":1}}],[\"并且f\",{\"1\":{\"24\":1}}],[\"含有\",{\"1\":{\"43\":1}}],[\"根据透视投影矩阵\",{\"1\":{\"97\":1}}],[\"根据\",{\"1\":{\"85\":1}}],[\"根据期望的性质有\",{\"1\":{\"54\":1}}],[\"根据主方法定理第二种情况可得\",{\"1\":{\"41\":1}}],[\"根据假设有\",{\"1\":{\"33\":1}}],[\"≠\",{\"1\":{\"41\":1,\"66\":1}}],[\"维持堆的性质\",{\"0\":{\"41\":1}}],[\"最近邻采样\",{\"0\":{\"114\":1}}],[\"最坏运行时间为\",{\"1\":{\"65\":1}}],[\"最坏情况线性时间选择算法\",{\"0\":{\"66\":1}}],[\"最坏情况分析\",{\"0\":{\"53\":1}}],[\"最坏情况下的划分\",{\"0\":{\"50\":1}}],[\"最坏情况下时间复杂度为\",{\"1\":{\"29\":1}}],[\"最多可以使用\",{\"1\":{\"64\":1}}],[\"最多有\",{\"1\":{\"43\":1}}],[\"最小和最大\",{\"0\":{\"64\":1}}],[\"最好情况下的划分\",{\"0\":{\"51\":1}}],[\"最大堆\",{\"1\":{\"40\":1}}],[\"堆\",{\"0\":{\"40\":1}}],[\"堆排序\",{\"0\":{\"39\":1,\"44\":1},\"2\":{\"47\":1}}],[\"才能使得每个桶中都至少有1个球\",{\"1\":{\"36\":1}}],[\"才能使得指定的桶中至少有1个球\",{\"1\":{\"36\":1}}],[\"3x3\",{\"1\":{\"126\":1,\"127\":1}}],[\"3\",{\"1\":{\"36\":1,\"41\":1,\"64\":2,\"66\":1,\"123\":1}}],[\"365\",{\"1\":{\"35\":1}}],[\"符合几何分布\",{\"1\":{\"36\":1}}],[\"失败概率为\",{\"1\":{\"36\":1}}],[\"球进入指定的桶中otherwise​​\",{\"1\":{\"36\":1}}],[\"球进入指定的桶中\",{\"1\":{\"36\":1}}],[\"球与桶\",{\"0\":{\"36\":1}}],[\"第一步\",{\"1\":{\"136\":1}}],[\"第\",{\"1\":{\"36\":1,\"63\":1}}],[\"这样保证当有两段连续的线段连接在一起的时候\",{\"1\":{\"94\":1}}],[\"这一问题模型对于分析哈希算法特别有用\",{\"1\":{\"36\":1}}],[\"这时候就可以使用随机化算法\",{\"1\":{\"33\":1}}],[\"至少有一对生日相同\",{\"1\":{\"35\":1}}],[\"人时\",{\"1\":{\"35\":1}}],[\"天\",{\"1\":{\"35\":1}}],[\"hxz​\",{\"1\":{\"129\":1}}],[\"h=∥v+l∥v+l​\",{\"1\":{\"109\":1}}],[\"handle\",{\"1\":{\"58\":1}}],[\"have\",{\"1\":{\"35\":2}}],[\"hierarchy\",{\"0\":{\"74\":1,\"76\":1}}],[\"highest\",{\"1\":{\"49\":1}}],[\"hired​​\",{\"1\":{\"31\":1}}],[\"hiredif\",{\"1\":{\"31\":1}}],[\"hired\",{\"1\":{\"31\":1}}],[\"hire\",{\"1\":{\"29\":2,\"33\":2}}],[\"h\",{\"1\":{\"43\":1,\"109\":1}}],[\"heapsort\",{\"1\":{\"44\":1}}],[\"heap\",{\"1\":{\"41\":2,\"42\":2,\"44\":3,\"45\":16}}],[\"heapify\",{\"1\":{\"41\":2,\"42\":1,\"44\":1,\"45\":1}}],[\"两人生日相同\",{\"1\":{\"35\":1}}],[\"解\",{\"1\":{\"35\":1,\"36\":3}}],[\"有\",{\"1\":{\"35\":2,\"36\":2,\"96\":1,\"97\":1,\"121\":1}}],[\"问题\",{\"1\":{\"35\":1,\"36\":3}}],[\"生日悖论\",{\"0\":{\"35\":1}}],[\"的方向\",{\"1\":{\"133\":2,\"136\":2}}],[\"的维度\",{\"1\":{\"122\":1}}],[\"的被积函数\",{\"1\":{\"87\":1}}],[\"的分布\",{\"1\":{\"85\":1}}],[\"的速度下降\",{\"1\":{\"82\":1}}],[\"的增长\",{\"1\":{\"82\":1}}],[\"的执行是独立的\",{\"1\":{\"74\":1}}],[\"的线程数量存在上限\",{\"1\":{\"74\":1}}],[\"的稳定排序算法时\",{\"1\":{\"59\":2}}],[\"的任一\",{\"1\":{\"33\":1}}],[\"的一个排列\",{\"1\":{\"29\":1}}],[\"数组\",{\"1\":{\"33\":1}}],[\"成立终止\",{\"1\":{\"33\":1}}],[\"初始\",{\"1\":{\"33\":1}}],[\"中标准\",{\"1\":{\"133\":2,\"136\":2}}],[\"中随机抽取\",{\"1\":{\"84\":1}}],[\"中间可以增加一层可选的\",{\"1\":{\"75\":1}}],[\"中有限的内存资源\",{\"1\":{\"74\":1}}],[\"中位数\",{\"2\":{\"68\":1}}],[\"中位数和顺序统计\",{\"0\":{\"63\":1}}],[\"中的数量\",{\"1\":{\"60\":1}}],[\"中任意元素之前元素\",{\"1\":{\"54\":1}}],[\"中\",{\"1\":{\"33\":1,\"74\":2,\"75\":1}}],[\"中前\",{\"1\":{\"33\":3}}],[\"放入\",{\"1\":{\"33\":1}}],[\"推导\",{\"0\":{\"127\":1},\"1\":{\"33\":1}}],[\"等于元素比较的次数\",{\"1\":{\"54\":1}}],[\"等于\",{\"1\":{\"33\":1}}],[\"是标准正交向量\",{\"1\":{\"131\":1}}],[\"是半程向量\",{\"1\":{\"109\":1}}],[\"是三角形\",{\"1\":{\"96\":1}}],[\"是渐进最优的\",{\"1\":{\"59\":2}}],[\"是该排列的概率都相等\",{\"1\":{\"33\":1}}],[\"是列表\",{\"1\":{\"29\":1}}],[\"排列的概率为\",{\"1\":{\"33\":1}}],[\"排列\",{\"1\":{\"33\":1}}],[\"排序\",{\"2\":{\"9\":1}}],[\"经过\",{\"1\":{\"33\":3}}],[\"假定相机位置在\",{\"1\":{\"131\":1}}],[\"假定知道输入的分布情况下\",{\"1\":{\"29\":1}}],[\"假设令\",{\"1\":{\"85\":1}}],[\"假设每次划分都会分为\",{\"1\":{\"51\":1}}],[\"假设\",{\"1\":{\"33\":1,\"35\":1,\"53\":1,\"96\":1}}],[\"接下来使用数学归纳法证明该算法可以产生随机的排列分布\",{\"1\":{\"33\":1}}],[\"随机采样一组独立的随机变量\",{\"1\":{\"82\":1}}],[\"随机快速排序的期望运行时间是\",{\"1\":{\"54\":1}}],[\"随机快速排序\",{\"0\":{\"52\":1}}],[\"随机将\",{\"1\":{\"36\":1}}],[\"随机排列数组\",{\"1\":{\"33\":1}}],[\"随机化算法的行为不仅取决于输入\",{\"1\":{\"33\":1}}],[\"随机化算法\",{\"0\":{\"33\":1},\"2\":{\"38\":1}}],[\"还取决于随机数生成器所产生的结果\",{\"1\":{\"33\":1}}],[\"综上\",{\"1\":{\"33\":1,\"131\":1}}],[\"而是每次都随机选择一个申请人来面试\",{\"1\":{\"33\":1}}],[\"例如\",{\"1\":{\"33\":1,\"123\":1}}],[\"我们希望通过一个旋转矩阵变换将\",{\"1\":{\"131\":1}}],[\"我们可以先对整体一起进行矩阵变换\",{\"1\":{\"131\":1}}],[\"我们可以假定申请人以完全随机的顺序进来\",{\"1\":{\"29\":1}}],[\"我们根据概率\",{\"1\":{\"84\":1}}],[\"我们随机采样一组独立的均匀随机变量\",{\"1\":{\"81\":1}}],[\"我们并不知道输入的分布情况或者无法对输入的分布进行建模\",{\"1\":{\"33\":1}}],[\"每一位有\",{\"1\":{\"59\":1}}],[\"每一个阶段都会持续到投入一个空的桶中为止\",{\"1\":{\"36\":1}}],[\"每一个桶中期望会有多少个球\",{\"1\":{\"36\":1}}],[\"每一个申请人\",{\"1\":{\"29\":1}}],[\"每次成功投进的概率为\",{\"1\":{\"36\":1}}],[\"每对数为逆序对的概率是\",{\"1\":{\"32\":1}}],[\"对数\",{\"1\":{\"32\":1}}],[\"对于任意矩阵\",{\"1\":{\"124\":1}}],[\"对于每一个像素点\",{\"1\":{\"94\":1}}],[\"对于形如\",{\"1\":{\"87\":1}}],[\"对于\",{\"1\":{\"33\":1,\"54\":3}}],[\"对于雇佣问题我们不按照给定的1\",{\"1\":{\"33\":1}}],[\"对于雇佣问题\",{\"1\":{\"29\":1}}],[\"对于递归等式\",{\"1\":{\"24\":1}}],[\"共有\",{\"1\":{\"32\":1}}],[\"将由\",{\"1\":{\"136\":1}}],[\"将朝向从\",{\"1\":{\"131\":1}}],[\"将这\",{\"1\":{\"121\":1}}],[\"将积分域\",{\"1\":{\"84\":1}}],[\"将其中较大值和当前最大值进行比较\",{\"1\":{\"64\":1}}],[\"将其中较小值和当前最小值进行比较\",{\"1\":{\"64\":1}}],[\"将期望分解为每一个具体的事件\",{\"1\":{\"32\":1}}],[\"将你的个人介绍和档案放置在此处\",{\"1\":{\"0\":1}}],[\"逆序对的期望数\",{\"0\":{\"32\":1}}],[\"个列向量进行线性变换后所能表示的向量记为\",{\"1\":{\"121\":1}}],[\"个列向量\",{\"1\":{\"121\":1}}],[\"个样本\",{\"1\":{\"84\":1}}],[\"个不重叠的区域\",{\"1\":{\"84\":1}}],[\"个不同的数字和一个整数\",{\"1\":{\"63\":1}}],[\"个不同的元素的数组\",{\"1\":{\"54\":1}}],[\"个取值范围\",{\"1\":{\"59\":1}}],[\"个\",{\"1\":{\"59\":2}}],[\"个结点\",{\"1\":{\"43\":1}}],[\"个阶段中需要投多少球才能投进空的桶中\",{\"1\":{\"36\":1}}],[\"个阶段\",{\"1\":{\"36\":1}}],[\"个球\",{\"1\":{\"36\":1}}],[\"个球进入指定的桶中\",{\"1\":{\"36\":1}}],[\"个球投入桶中\",{\"1\":{\"36\":1}}],[\"个相同的桶\",{\"1\":{\"36\":1}}],[\"个人生日相同\",{\"1\":{\"35\":1}}],[\"个元素并进行比较\",{\"1\":{\"64\":1}}],[\"个元素的数组\",{\"1\":{\"54\":2}}],[\"个元素的堆的高度\",{\"1\":{\"43\":1}}],[\"个元素正好为\",{\"1\":{\"33\":2}}],[\"个元素为\",{\"1\":{\"33\":1}}],[\"个元素中的任一\",{\"1\":{\"33\":1}}],[\"个申请人是否雇佣\",{\"1\":{\"31\":1}}],[\"个排列出现的概率都相等\",{\"1\":{\"29\":1}}],[\"表示相机的旋转朝向\",{\"1\":{\"131\":1}}],[\"表示该矩阵变换进行了翻转操作\",{\"1\":{\"123\":1}}],[\"表示该矩阵变换进行了降维操作\",{\"1\":{\"123\":1}}],[\"表示该矩阵对空间进行变换的缩放程度\",{\"1\":{\"123\":1}}],[\"表示由矩阵的列向量所能构成的向量所组成的向量空间\",{\"1\":{\"122\":1}}],[\"表示落在桶\",{\"1\":{\"60\":1}}],[\"表示需要投多少球才能使得每个桶中都至少有\",{\"1\":{\"36\":1}}],[\"表示需要投多少球才能成功投进指定的桶\",{\"1\":{\"36\":1}}],[\"表示有多少球进入指定的桶中\",{\"1\":{\"36\":1}}],[\"表示有多少对生日相同\",{\"1\":{\"35\":1}}],[\"表示\",{\"1\":{\"33\":1,\"35\":1,\"59\":1}}],[\"表示数组\",{\"1\":{\"33\":1}}],[\"表示经过前面\",{\"1\":{\"33\":1}}],[\"表示第\",{\"1\":{\"31\":1,\"33\":1,\"36\":2}}],[\"表示雇佣次数\",{\"1\":{\"31\":1}}],[\"示例\",{\"0\":{\"31\":1,\"32\":1}}],[\"令随机变量\",{\"1\":{\"31\":1,\"60\":1}}],[\"令\",{\"1\":{\"30\":1,\"33\":3,\"35\":2,\"36\":4,\"97\":1}}],[\"引理3\",{\"1\":{\"54\":1}}],[\"引理2\",{\"1\":{\"54\":1,\"59\":1}}],[\"引理1\",{\"1\":{\"54\":1,\"59\":1}}],[\"引理\",{\"1\":{\"30\":1}}],[\"指示器随机变量\",{\"0\":{\"30\":1},\"1\":{\"30\":1}}],[\"雇佣问题\",{\"0\":{\"29\":1,\"31\":1}}],[\"用于解决如下的递归等式\",{\"1\":{\"25\":1}}],[\"满足多项式成长的条件\",{\"1\":{\"25\":1}}],[\"满足\",{\"1\":{\"24\":1,\"25\":1,\"124\":1}}],[\"使用俄罗斯轮盘总是会增加方差\",{\"1\":{\"87\":1}}],[\"使用俄罗斯轮盘的蒙特卡洛估计等于\",{\"1\":{\"87\":1}}],[\"使用类似于快速排序的分治算法\",{\"1\":{\"65\":1}}],[\"使用替换法分析\",{\"1\":{\"53\":1}}],[\"使用数学归纳法进行证明\",{\"1\":{\"22\":1}}],[\"使得相机位于原点且朝向从\",{\"1\":{\"131\":1}}],[\"使得\",{\"1\":{\"24\":1}}],[\"则着色该像素点\",{\"1\":{\"94\":1}}],[\"则在\",{\"1\":{\"84\":1}}],[\"则采样方差等于\",{\"1\":{\"82\":1}}],[\"则蒙特卡洛估计值等于\",{\"1\":{\"81\":1}}],[\"则桶排序的运行时间为\",{\"1\":{\"60\":1}}],[\"则选择\",{\"1\":{\"59\":1}}],[\"则有\",{\"1\":{\"30\":1,\"31\":1,\"43\":1,\"51\":1,\"53\":1}}],[\"则表示所有\",{\"1\":{\"29\":1}}],[\"则\",{\"1\":{\"24\":3,\"25\":1,\"33\":2,\"35\":1,\"36\":4,\"97\":1,\"130\":1}}],[\"其旋转之后仍然是一组标准正交基\",{\"1\":{\"127\":1}}],[\"其概率为\",{\"1\":{\"33\":1}}],[\"其时间复杂度计算可以根据以下情况分类\",{\"1\":{\"24\":1}}],[\"其中\",{\"1\":{\"24\":2,\"25\":1,\"54\":2,\"81\":1,\"87\":1,\"109\":1}}],[\"非负\",{\"1\":{\"24\":1}}],[\"404\",{\"1\":{\"139\":1}}],[\"4\",{\"1\":{\"23\":1,\"32\":1}}],[\"递归树法\",{\"0\":{\"23\":1}}],[\"递归时间复杂度计算方法\",{\"0\":{\"21\":1}}],[\"就能保证最后的不等式成立\",{\"1\":{\"22\":1}}],[\"取得足够大\",{\"1\":{\"22\":1}}],[\"时间复杂度\",{\"0\":{\"43\":1}}],[\"时间复杂度为\",{\"1\":{\"18\":1,\"19\":1,\"20\":1,\"41\":1,\"44\":1,\"58\":1}}],[\"时\",{\"1\":{\"33\":1,\"35\":1,\"59\":2,\"82\":1}}],[\"时有\",{\"1\":{\"22\":1}}],[\"当然也可以变换为\",{\"1\":{\"131\":1}}],[\"当使用和被积函数\",{\"1\":{\"85\":1}}],[\"当使用时间复杂度为\",{\"1\":{\"59\":2}}],[\"当偏差\",{\"1\":{\"82\":1}}],[\"当且仅当在\",{\"1\":{\"54\":1}}],[\"当f\",{\"1\":{\"25\":1}}],[\"当\",{\"1\":{\"22\":1,\"33\":1,\"35\":1,\"59\":2,\"82\":1,\"87\":1,\"130\":1}}],[\"证明\",{\"1\":{\"22\":1,\"54\":2}}],[\"猜测\",{\"1\":{\"22\":2}}],[\"替换法主要分为两个步骤\",{\"1\":{\"22\":1}}],[\"替换法\",{\"0\":{\"22\":1}}],[\"81\",{\"1\":{\"20\":1}}],[\"基本变换\",{\"0\":{\"124\":1}}],[\"基本思想\",{\"1\":{\"84\":1,\"85\":1,\"87\":1}}],[\"基本思想是将子问题从8次矩阵乘法减少到7次\",{\"1\":{\"20\":1}}],[\"基数排序的时间复杂度为\",{\"1\":{\"59\":2}}],[\"基数排序\",{\"0\":{\"59\":1},\"2\":{\"62\":1}}],[\"基于比较的排序算法在最坏情况下至少需要比较\",{\"1\":{\"57\":1}}],[\"基础排序\",{\"0\":{\"3\":1}}],[\"x+y\",{\"1\":{\"124\":2}}],[\"xp​−xc​\",{\"1\":{\"96\":2}}],[\"xp​yp​1​=αxa​+βxb​+γxc​=αya​+βyb​+γyc​=α+β+γ​\",{\"1\":{\"96\":1}}],[\"xmax\",{\"1\":{\"95\":1}}],[\"xmin\",{\"1\":{\"95\":1}}],[\"xˉ=\",{\"1\":{\"82\":1}}],[\"x=i=1∑n−1​j=i+1∑n​xij​\",{\"1\":{\"54\":1}}],[\"x=k\",{\"1\":{\"36\":1}}],[\"xb​−xc​\",{\"1\":{\"96\":3}}],[\"xb\",{\"1\":{\"36\":1}}],[\"x1\",{\"1\":{\"33\":1,\"36\":1}}],[\"xk+1\",{\"1\":{\"33\":1}}],[\"xk+1>\",{\"1\":{\"33\":2}}],[\"xk>\",{\"1\":{\"33\":1}}],[\"x2\",{\"1\":{\"33\":3}}],[\"xij​=i\",{\"1\":{\"54\":1}}],[\"xij​\",{\"1\":{\"35\":1,\"54\":1}}],[\"xij​​=i\",{\"1\":{\"35\":1}}],[\"xij\",{\"1\":{\"35\":2}}],[\"xi​−xˉ\",{\"1\":{\"82\":1}}],[\"xi​∈\",{\"1\":{\"81\":1}}],[\"xi​\",{\"1\":{\"31\":1,\"36\":2,\"81\":5,\"82\":5}}],[\"xi​​=i\",{\"1\":{\"31\":1,\"36\":1}}],[\"xi\",{\"1\":{\"31\":1,\"36\":4,\"84\":2}}],[\"xa​−xc​\",{\"1\":{\"96\":3}}],[\"xa\",{\"1\":{\"30\":2}}],[\"x\",{\"1\":{\"19\":1,\"25\":1,\"31\":2,\"35\":2,\"36\":6,\"45\":9,\"49\":2,\"54\":2,\"63\":1,\"66\":2,\"73\":1,\"74\":5,\"75\":3,\"81\":9,\"82\":4,\"85\":13,\"87\":5,\"95\":4,\"124\":4,\"131\":2}}],[\"dx1​\",{\"1\":{\"85\":1}}],[\"dx​\",{\"1\":{\"81\":1}}],[\"dx=∫ab​f\",{\"1\":{\"81\":1}}],[\"dx=nb−a​i=1∑n​∫ab​f\",{\"1\":{\"81\":1}}],[\"dx\",{\"1\":{\"81\":2,\"82\":2}}],[\"directx\",{\"0\":{\"135\":1},\"1\":{\"133\":1,\"136\":1}}],[\"diamond\",{\"1\":{\"94\":1}}],[\"dimension\",{\"1\":{\"75\":1}}],[\"dims\",{\"1\":{\"75\":1}}],[\"dim3\",{\"1\":{\"74\":3,\"75\":4}}],[\"digit\",{\"1\":{\"59\":1}}],[\"divide\",{\"1\":{\"19\":1}}],[\"d\",{\"1\":{\"59\":4}}],[\"duplicate\",{\"1\":{\"58\":1}}],[\"dummy\",{\"1\":{\"29\":1}}],[\"done\",{\"1\":{\"66\":1}}],[\"does\",{\"1\":{\"30\":1}}],[\"downto\",{\"1\":{\"6\":1,\"42\":1,\"44\":1,\"58\":1}}],[\"​cn​​\",{\"1\":{\"121\":1}}],[\"​wc​γ\",{\"1\":{\"97\":1}}],[\"​wb​β\",{\"1\":{\"97\":1}}],[\"​wa​α\",{\"1\":{\"97\":1}}],[\"​+wc​γ\",{\"1\":{\"97\":4}}],[\"​+wc​kγ\",{\"1\":{\"97\":1}}],[\"​+wb​β\",{\"1\":{\"97\":4}}],[\"​+wb​kβ\",{\"1\":{\"97\":1}}],[\"​≤c\",{\"1\":{\"53\":1}}],[\"​≤max\",{\"1\":{\"53\":1}}],[\"​≤2c\",{\"1\":{\"22\":1}}],[\"​2hh​≤cnh=0∑∞​2hh​≤cn⋅\",{\"1\":{\"43\":1}}],[\"​2hn​ch=cnh=0∑\",{\"1\":{\"43\":1}}],[\"​​=​1000​0100​000\",{\"1\":{\"135\":1}}],[\"​​=wa​α\",{\"1\":{\"97\":2}}],[\"​​​\",{\"1\":{\"97\":1}}],[\"​​\",{\"1\":{\"33\":1,\"35\":1,\"97\":1}}],[\"​dx\",{\"1\":{\"25\":1}}],[\"​\",{\"1\":{\"19\":1,\"31\":1,\"33\":1,\"36\":1,\"43\":2,\"50\":1,\"53\":1,\"54\":1,\"60\":1,\"81\":1,\"82\":4,\"84\":1,\"85\":1,\"97\":4,\"124\":1}}],[\"​=​r−l2​000​0t−b2​00​00f−n2​0​0001​​​1000​0100​0010​−2l+r​−2b+t​−2n+f​1​​=​r−l2​000​0t−b2​00​00f−n2​0​l−rl+r​b−tb+t​n−fn+f​1​​​\",{\"1\":{\"134\":1}}],[\"​=s\",{\"1\":{\"134\":1}}],[\"​=f\",{\"1\":{\"124\":1}}],[\"​=wa​α\",{\"1\":{\"97\":1}}],[\"​=wc​kγ\",{\"1\":{\"97\":1}}],[\"​=wb​kβ\",{\"1\":{\"97\":1}}],[\"​=αwa​+βwb​+γwc​αwa​​=αwa​+βwb​+γwc​βwb​​=αwa​+βwb​+γwc​γwc​​​\",{\"1\":{\"97\":1}}],[\"​=αwa​+βwb​+γwc​αa\",{\"1\":{\"97\":1}}],[\"​=αa+βb+γc=α\",{\"1\":{\"97\":1}}],[\"​=1=1​\",{\"1\":{\"97\":1}}],[\"​=1−α−β​\",{\"1\":{\"96\":1}}],[\"​=mst​po\",{\"1\":{\"135\":1}}],[\"​=m\",{\"1\":{\"97\":1}}],[\"​=v\",{\"1\":{\"82\":1}}],[\"​=t\",{\"1\":{\"50\":1}}],[\"​=h=0∑\",{\"1\":{\"43\":1}}],[\"​=n1​v\",{\"1\":{\"85\":1}}],[\"​=n\",{\"1\":{\"33\":1}}],[\"​=pr\",{\"1\":{\"54\":1}}],[\"​=p\",{\"1\":{\"33\":1}}],[\"​=e\",{\"1\":{\"31\":1,\"35\":1,\"36\":2,\"54\":1,\"60\":1,\"81\":1}}],[\"​=\",{\"1\":{\"19\":1,\"96\":1}}],[\"​=∞\",{\"1\":{\"15\":1}}],[\"​=0\",{\"1\":{\"14\":1}}],[\"cn\",{\"1\":{\"121\":1}}],[\"cn²\",{\"1\":{\"53\":1}}],[\"c2\",{\"1\":{\"121\":1}}],[\"cb×cq​\",{\"1\":{\"95\":1}}],[\"cb×ca\",{\"1\":{\"95\":1}}],[\"c=0\",{\"1\":{\"87\":1}}],[\"c=∫f\",{\"1\":{\"85\":1}}],[\"c1\",{\"1\":{\"121\":1}}],[\"c1​​c2​​\",{\"1\":{\"121\":1}}],[\"c1​\",{\"1\":{\"85\":1,\"97\":3}}],[\"c11​c21​​c12​c22​​\",{\"1\":{\"19\":1}}],[\"clusterdim\",{\"1\":{\"75\":3}}],[\"cluster\",{\"1\":{\"75\":13}}],[\"clusters\",{\"0\":{\"75\":1},\"1\":{\"75\":1}}],[\"cpu\",{\"0\":{\"72\":1}}],[\"cudalaunchkernelex\",{\"1\":{\"75\":1}}],[\"cudalaunchattributeclusterdimension\",{\"1\":{\"75\":1}}],[\"cudalaunchattribute\",{\"1\":{\"75\":1}}],[\"cudalaunchconfig\",{\"1\":{\"75\":1}}],[\"cuda\",{\"0\":{\"69\":1,\"71\":1},\"2\":{\"70\":1,\"77\":1}}],[\"current\",{\"1\":{\"45\":1}}],[\"chosen\",{\"1\":{\"54\":3}}],[\"ch≤h=0∑\",{\"1\":{\"43\":1}}],[\"cq2+c\",{\"1\":{\"53\":1}}],[\"ci​n+ch​n\",{\"1\":{\"29\":1}}],[\"ca×cq​\",{\"1\":{\"95\":1}}],[\"candidates\",{\"1\":{\"33\":1}}],[\"candidate\",{\"1\":{\"29\":6,\"31\":3}}],[\"case\",{\"1\":{\"19\":1}}],[\"cf\",{\"1\":{\"24\":1}}],[\"c₂₂\",{\"1\":{\"19\":2}}],[\"c₂₁\",{\"1\":{\"19\":2}}],[\"c₁₂\",{\"1\":{\"19\":2}}],[\"c₁₁\",{\"1\":{\"19\":2}}],[\"core\",{\"1\":{\"74\":3}}],[\"commonly\",{\"1\":{\"59\":1}}],[\"compared\",{\"1\":{\"54\":3}}],[\"config\",{\"1\":{\"75\":6}}],[\"concatenated\",{\"1\":{\"60\":1}}],[\"concatenate\",{\"1\":{\"60\":1}}],[\"contains\",{\"1\":{\"58\":2}}],[\"conquer\",{\"1\":{\"19\":1}}],[\"counting\",{\"1\":{\"58\":1,\"59\":1}}],[\"copy\",{\"1\":{\"7\":2,\"58\":1}}],[\"c\",{\"1\":{\"18\":3,\"19\":4,\"22\":1,\"24\":1,\"32\":2,\"58\":12,\"73\":3,\"74\":6,\"95\":1,\"97\":5,\"131\":1}}],[\"mview​=rview​tview​​=​rx​ux​vx​0​ry​uy​vy​0​rz​uz​vz​0​0001​​​1000​0100​0010​−tx​−ty​−tz​1​​=​rx​ux​vx​0​ry​uy​vy​0​rz​uz​vz​0​−t⋅r−t⋅u−t⋅v1​​​\",{\"1\":{\"131\":1}}],[\"m−1\",{\"1\":{\"130\":1}}],[\"mt\",{\"1\":{\"130\":1}}],[\"my\",{\"1\":{\"124\":1}}],[\"mx\",{\"1\":{\"124\":1}}],[\"m=\",{\"1\":{\"121\":1}}],[\"m\",{\"1\":{\"97\":2,\"121\":1,\"124\":4,\"130\":3}}],[\"mse\",{\"1\":{\"82\":2}}],[\"multiple\",{\"0\":{\"86\":1},\"1\":{\"75\":1}}],[\"multiply\",{\"1\":{\"18\":1,\"19\":9}}],[\"must\",{\"1\":{\"75\":1}}],[\"mipmapping\",{\"0\":{\"117\":1}}],[\"mis\",{\"0\":{\"86\":1}}],[\"middle\",{\"1\":{\"66\":1}}],[\"min\",{\"1\":{\"64\":4}}],[\"minimum\",{\"1\":{\"64\":1,\"66\":2}}],[\"memory\",{\"0\":{\"76\":1}}],[\"medians\",{\"1\":{\"66\":1}}],[\"merge\",{\"1\":{\"7\":5}}],[\"mod\",{\"1\":{\"66\":1}}],[\"matadd<<<numblocks\",{\"1\":{\"74\":2}}],[\"matadd\",{\"1\":{\"74\":3}}],[\"matrix\",{\"1\":{\"18\":1,\"19\":9}}],[\"main\",{\"1\":{\"73\":1,\"74\":2,\"75\":2}}],[\"make\",{\"1\":{\"60\":1}}],[\"maximum\",{\"1\":{\"45\":2}}],[\"max\",{\"1\":{\"41\":2,\"42\":2,\"44\":2,\"45\":10}}],[\"矩阵相乘\",{\"0\":{\"18\":1,\"19\":1,\"20\":1}}],[\"即把视锥体往中间压缩成一个长方体\",{\"1\":{\"136\":1}}],[\"即秩⬇\",{\"1\":{\"123\":1}}],[\"即\",{\"1\":{\"14\":1,\"15\":1,\"31\":1,\"35\":1,\"85\":1}}],[\"∀c∃n0​>0\",{\"1\":{\"14\":1,\"15\":1}}],[\"∀n≥n0​\",{\"1\":{\"11\":1,\"12\":1,\"13\":1,\"14\":1,\"15\":1}}],[\"θ\",{\"1\":{\"13\":1,\"18\":1,\"58\":1,\"59\":6,\"60\":2,\"65\":2}}],[\"ω\",{\"1\":{\"12\":1,\"15\":1,\"57\":1}}],[\"gpc\",{\"1\":{\"75\":1}}],[\"gpu\",{\"0\":{\"72\":1},\"1\":{\"75\":1}}],[\"griddim\",{\"1\":{\"75\":1}}],[\"grid\",{\"1\":{\"74\":1,\"75\":2}}],[\"group\",{\"1\":{\"66\":2}}],[\"groups\",{\"1\":{\"66\":1}}],[\"global\",{\"1\":{\"73\":1,\"74\":2,\"75\":2}}],[\"g\",{\"1\":{\"11\":1,\"12\":1,\"13\":1,\"14\":1,\"15\":1,\"66\":3}}],[\"opengl\",{\"0\":{\"134\":1},\"1\":{\"133\":1,\"136\":1}}],[\"output\",{\"1\":{\"75\":6}}],[\"otherwise\",{\"1\":{\"66\":1}}],[\"on\",{\"1\":{\"59\":1}}],[\"order\",{\"1\":{\"60\":1}}],[\"or\",{\"1\":{\"54\":1,\"58\":1}}],[\"overflow\",{\"1\":{\"45\":1}}],[\"occur​\",{\"1\":{\"30\":1}}],[\"occursa\",{\"1\":{\"30\":1}}],[\"o\",{\"1\":{\"11\":1,\"14\":1,\"29\":1,\"41\":1,\"44\":1,\"54\":2,\"82\":1}}],[\"of\",{\"1\":{\"7\":2,\"33\":1,\"58\":3,\"66\":5,\"75\":1}}],[\"公式\",{\"1\":{\"11\":1,\"12\":1,\"13\":1,\"14\":1,\"15\":1}}],[\"渐进复杂度\",{\"0\":{\"10\":1}}],[\"≥\",{\"1\":{\"7\":1}}],[\"≤2c\",{\"1\":{\"22\":1}}],[\"≤cn2​\",{\"1\":{\"53\":1}}],[\"≤cn2−c\",{\"1\":{\"53\":1}}],[\"≤cnlgn​\",{\"1\":{\"22\":1}}],[\"≤c2​g\",{\"1\":{\"13\":1}}],[\"≤cg\",{\"1\":{\"11\":1}}],[\"≤f\",{\"1\":{\"12\":1,\"13\":1}}],[\"≤\",{\"1\":{\"7\":1,\"41\":3,\"49\":1,\"53\":2,\"60\":1,\"63\":2}}],[\"km\",{\"1\":{\"124\":1}}],[\"kx\",{\"1\":{\"124\":2}}],[\"kf\",{\"1\":{\"124\":1}}],[\"kαβγ​=wa​α\",{\"1\":{\"97\":1}}],[\"k=αwa​+βwb​+γwc​1​\",{\"1\":{\"97\":1}}],[\"kernel<<<numblocks\",{\"1\":{\"75\":1}}],[\"kernel\",{\"1\":{\"73\":2,\"74\":5,\"75\":7}}],[\"kernels\",{\"0\":{\"73\":1}}],[\"key\",{\"1\":{\"4\":3,\"45\":10}}],[\"k−1\",{\"1\":{\"35\":1}}],[\"k2​\",{\"1\":{\"35\":1}}],[\"k+1\",{\"1\":{\"33\":5}}],[\"k\",{\"1\":{\"7\":11,\"18\":3,\"33\":7,\"35\":3,\"45\":5,\"58\":4,\"59\":1,\"65\":4,\"66\":4}}],[\"blinn\",{\"0\":{\"109\":1}}],[\"blockdim\",{\"1\":{\"74\":2,\"75\":1}}],[\"blockidx\",{\"1\":{\"74\":2}}],[\"blocks\",{\"1\":{\"74\":5,\"75\":2}}],[\"block\",{\"0\":{\"75\":1},\"1\":{\"74\":3,\"75\":2}}],[\"b1​\",{\"1\":{\"97\":3}}],[\"b11​b21​​b12​b22​​\",{\"1\":{\"19\":1}}],[\"bc×bq​\",{\"1\":{\"95\":1}}],[\"bresenhan\",{\"0\":{\"94\":1}}],[\"b−a1​dx=n1​i=1∑n​∫ab​f\",{\"1\":{\"81\":1}}],[\"bn\",{\"1\":{\"59\":1}}],[\"b≥\",{\"1\":{\"59\":1}}],[\"b<\",{\"1\":{\"59\":1}}],[\"bucket\",{\"1\":{\"60\":1}}],[\"build\",{\"1\":{\"42\":1,\"44\":1}}],[\"bubble\",{\"1\":{\"6\":1}}],[\"b​\",{\"1\":{\"36\":1}}],[\"b>\",{\"1\":{\"36\":1}}],[\"birthdayotherwise​​\",{\"1\":{\"35\":1}}],[\"birthday\",{\"1\":{\"35\":1}}],[\"bi​\",{\"1\":{\"25\":1}}],[\"ba×bq​\",{\"1\":{\"95\":1}}],[\"ba×bc\",{\"1\":{\"95\":1}}],[\"bazi是主方法的一般化形式\",{\"1\":{\"25\":1}}],[\"bazi法\",{\"0\":{\"25\":1}}],[\"base\",{\"1\":{\"19\":1}}],[\"b₂₂\",{\"1\":{\"19\":2}}],[\"b₂₁\",{\"1\":{\"19\":2}}],[\"b₁₂\",{\"1\":{\"19\":2}}],[\"b₁₁\",{\"1\":{\"19\":2}}],[\"b\",{\"1\":{\"18\":2,\"19\":3,\"24\":3,\"36\":10,\"58\":4,\"59\":2,\"60\":8,\"73\":3,\"74\":6,\"81\":1,\"95\":1,\"97\":5,\"133\":1,\"136\":3}}],[\"better\",{\"1\":{\"29\":1}}],[\"best\",{\"1\":{\"29\":3}}],[\"be\",{\"1\":{\"7\":1,\"58\":1,\"60\":1,\"75\":1}}],[\"ls​=ks​is​max\",{\"1\":{\"109\":1}}],[\"ld​=kd​id​max\",{\"1\":{\"108\":1}}],[\"lambertian\",{\"0\":{\"108\":1}}],[\"la​=ka​ia​\",{\"1\":{\"107\":1}}],[\"largest\",{\"1\":{\"41\":7}}],[\"line\",{\"0\":{\"94\":1}}],[\"lines\",{\"1\":{\"66\":1}}],[\"like\",{\"1\":{\"66\":1}}],[\"lie\",{\"1\":{\"66\":1}}],[\"listss\",{\"1\":{\"60\":1}}],[\"lists\",{\"1\":{\"60\":1}}],[\"list\",{\"1\":{\"33\":1,\"60\":3}}],[\"low\",{\"1\":{\"49\":1}}],[\"lnb+o\",{\"1\":{\"36\":1}}],[\"lgn\",{\"1\":{\"41\":1,\"43\":3,\"54\":1,\"59\":4}}],[\"lg\",{\"1\":{\"22\":2}}],[\"less\",{\"1\":{\"58\":1}}],[\"left\",{\"1\":{\"40\":1,\"41\":1}}],[\"least\",{\"1\":{\"29\":1}}],[\"let\",{\"1\":{\"7\":1,\"58\":1,\"60\":1}}],[\"length\",{\"1\":{\"7\":2}}],[\"l\",{\"1\":{\"7\":10,\"41\":4,\"133\":1,\"136\":3}}],[\"rview​=​rtutvt0​0001​​=​rx​ux​vx​0​ry​uy​vy​0​rz​uz​vz​0​0001​​\",{\"1\":{\"131\":1}}],[\"rz​\",{\"1\":{\"126\":1}}],[\"ry​\",{\"1\":{\"126\":1}}],[\"rx​\",{\"1\":{\"126\":1}}],[\"rule\",{\"1\":{\"94\":1}}],[\"russian\",{\"0\":{\"87\":1}}],[\"roulette\",{\"0\":{\"87\":1}}],[\"r=\",{\"1\":{\"59\":1}}],[\"r=b\",{\"1\":{\"59\":1}}],[\"r≤b\",{\"1\":{\"59\":2}}],[\"ra\",{\"1\":{\"127\":2}}],[\"radix\",{\"1\":{\"59\":1}}],[\"random\",{\"1\":{\"33\":1,\"52\":1}}],[\"randomly\",{\"1\":{\"33\":2}}],[\"randomized\",{\"1\":{\"33\":1,\"52\":5,\"65\":4,\"66\":1}}],[\"rank\",{\"1\":{\"29\":3}}],[\"right\",{\"1\":{\"40\":1,\"41\":1}}],[\"rest\",{\"1\":{\"66\":1}}],[\"re\",{\"1\":{\"66\":1}}],[\"recursive\",{\"1\":{\"19\":9}}],[\"return\",{\"1\":{\"7\":1,\"19\":1,\"40\":3,\"45\":3,\"49\":1,\"52\":1,\"58\":1,\"60\":1,\"64\":1,\"65\":4,\"66\":4}}],[\"r\",{\"1\":{\"7\":18,\"41\":4,\"49\":8,\"52\":8,\"59\":1,\"65\":4,\"66\":9,\"121\":1,\"122\":1,\"127\":1,\"131\":5,\"133\":1,\"136\":3}}],[\"q−\",{\"1\":{\"53\":1}}],[\"q2+\",{\"1\":{\"53\":2}}],[\"quick\",{\"1\":{\"49\":2}}],[\"quicksort\",{\"1\":{\"49\":1,\"52\":3}}],[\"qualified\",{\"1\":{\"29\":1}}],[\"qk\",{\"1\":{\"36\":1}}],[\"q+1\",{\"1\":{\"7\":2,\"49\":1,\"52\":1,\"65\":1,\"66\":1}}],[\"q\",{\"1\":{\"7\":8,\"36\":1,\"49\":3,\"52\":2,\"53\":1,\"65\":4,\"66\":4}}],[\"po\",{\"1\":{\"134\":1,\"135\":1}}],[\"phong\",{\"0\":{\"109\":1}}],[\"pp\",{\"1\":{\"97\":1}}],[\"p1​\",{\"1\":{\"97\":3}}],[\"pi​\",{\"1\":{\"84\":1}}],[\"pivot\",{\"1\":{\"49\":1,\"54\":4,\"65\":1}}],[\"pdf\",{\"1\":{\"81\":1}}],[\"p+3g\",{\"1\":{\"66\":1}}],[\"p+2g\",{\"1\":{\"66\":1}}],[\"p+1\",{\"1\":{\"66\":1}}],[\"place\",{\"1\":{\"66\":1}}],[\"put\",{\"1\":{\"66\":1}}],[\"parent\",{\"1\":{\"40\":1,\"45\":3}}],[\"partition\",{\"1\":{\"19\":1,\"49\":3,\"52\":3,\"65\":1,\"66\":1}}],[\"person\",{\"1\":{\"35\":2}}],[\"permute\",{\"1\":{\"33\":2}}],[\"processing\",{\"1\":{\"75\":1}}],[\"pr\",{\"1\":{\"30\":1,\"54\":1}}],[\"p\",{\"1\":{\"7\":10,\"25\":1,\"33\":4,\"36\":4,\"49\":7,\"52\":7,\"65\":6,\"66\":17,\"81\":3,\"82\":2,\"85\":4,\"96\":1,\"97\":5,\"109\":1}}],[\"归并排序\",{\"0\":{\"7\":1}}],[\"冒泡排序\",{\"0\":{\"6\":1}}],[\"<0\",{\"1\":{\"131\":2}}],[\"<x\",{\"1\":{\"131\":2}}],[\"<x1\",{\"1\":{\"33\":3}}],[\"<r\",{\"1\":{\"131\":2}}],[\"<rank\",{\"1\":{\"29\":1}}],[\"<a\",{\"1\":{\"66\":1}}],[\"<zn​\",{\"1\":{\"54\":2}}],[\"<1\",{\"1\":{\"29\":1,\"36\":1,\"131\":1}}],[\"<=\",{\"1\":{\"24\":1}}],[\"<f\",{\"1\":{\"15\":1}}],[\"<cg\",{\"1\":{\"14\":1}}],[\"<\",{\"1\":{\"5\":1,\"6\":1,\"7\":4,\"24\":1,\"45\":3,\"49\":1,\"52\":1,\"60\":1,\"65\":1,\"66\":1,\"74\":2,\"95\":2,\"123\":1,\"133\":2,\"136\":2}}],[\"wc​​=αwa​+βwb​+γwc​αwa​​a\",{\"1\":{\"97\":1}}],[\"wc​=αwa​+βwb​+γwc​​\",{\"1\":{\"97\":1}}],[\"wc​wc​​\",{\"1\":{\"97\":1}}],[\"wb​+γc\",{\"1\":{\"97\":2}}],[\"wb​wb​​\",{\"1\":{\"97\":1}}],[\"wp​wp​​=α\",{\"1\":{\"97\":1}}],[\"wp​wp​​\",{\"1\":{\"97\":1}}],[\"wa​+βb\",{\"1\":{\"97\":2}}],[\"wa​wa​​\",{\"1\":{\"97\":1}}],[\"want\",{\"1\":{\"66\":2}}],[\"we\",{\"1\":{\"66\":3}}],[\"which\",{\"1\":{\"49\":1}}],[\"while\",{\"1\":{\"4\":1,\"7\":3,\"45\":1,\"66\":1}}],[\"where\",{\"1\":{\"45\":1}}],[\"with\",{\"1\":{\"5\":2,\"6\":1,\"33\":1,\"41\":1,\"44\":1,\"45\":1,\"49\":2,\"52\":1,\"54\":3,\"60\":1,\"66\":1}}],[\"each\",{\"1\":{\"66\":1}}],[\"empty\",{\"1\":{\"60\":1}}],[\"end\",{\"1\":{\"58\":1}}],[\"ends\",{\"1\":{\"49\":1}}],[\"equal\",{\"1\":{\"58\":2}}],[\"error\",{\"1\":{\"45\":2}}],[\"exit\",{\"1\":{\"94\":2}}],[\"extract\",{\"1\":{\"45\":1}}],[\"exchange\",{\"1\":{\"5\":2,\"6\":1,\"41\":1,\"44\":1,\"45\":1,\"49\":2,\"52\":1,\"66\":1}}],[\"e2​∣e1​\",{\"1\":{\"33\":1}}],[\"e2\",{\"1\":{\"33\":1}}],[\"e1∩e2\",{\"1\":{\"33\":1}}],[\"e1​∩e2​\",{\"1\":{\"33\":1}}],[\"e1​\",{\"1\":{\"33\":2}}],[\"e1\",{\"1\":{\"33\":1}}],[\"e\",{\"1\":{\"30\":1,\"31\":1,\"33\":4,\"35\":2,\"36\":4,\"54\":1,\"60\":2,\"81\":2,\"87\":1}}],[\"else\",{\"1\":{\"7\":1,\"41\":1,\"65\":2,\"66\":2}}],[\"elements\",{\"1\":{\"58\":2}}],[\"element\",{\"1\":{\"5\":1,\"66\":2}}],[\"found\",{\"1\":{\"139\":1}}],[\"for\",{\"1\":{\"4\":1,\"5\":2,\"6\":2,\"7\":2,\"18\":3,\"29\":1,\"33\":1,\"42\":1,\"44\":1,\"49\":1,\"58\":4,\"59\":1,\"60\":3,\"64\":1,\"66\":2,\"95\":2}}],[\"f−∫f\",{\"1\":{\"82\":1}}],[\"f−e\",{\"1\":{\"82\":1}}],[\"f2\",{\"1\":{\"82\":1}}],[\"fn​=n1​i=1∑n​p\",{\"1\":{\"81\":1}}],[\"fn​=nb−a​i=1∑n​f\",{\"1\":{\"81\":1}}],[\"fn​\",{\"1\":{\"81\":2,\"82\":1}}],[\"float\",{\"1\":{\"73\":3,\"74\":6,\"75\":6}}],[\"from\",{\"1\":{\"54\":3,\"58\":1}}],[\"fi​=ni​1​j=1∑ni​​pi​\",{\"1\":{\"84\":1}}],[\"fifth\",{\"1\":{\"66\":1}}],[\"first\",{\"1\":{\"54\":3}}],[\"find\",{\"1\":{\"5\":1,\"45\":1}}],[\"f\",{\"1\":{\"11\":1,\"12\":1,\"13\":1,\"14\":2,\"15\":2,\"24\":5,\"81\":2,\"82\":13,\"84\":1,\"85\":5,\"87\":7,\"124\":1,\"133\":3,\"136\":5}}],[\"+z\",{\"1\":{\"133\":2,\"136\":1}}],[\"+kn​cn​\",{\"1\":{\"121\":1}}],[\"+αwa​+βwb​+γwc​γwc​​c\",{\"1\":{\"97\":1}}],[\"+αwa​+βwb​+γwc​βwb​​b\",{\"1\":{\"97\":1}}],[\"+mγ\",{\"1\":{\"97\":1}}],[\"+mβ\",{\"1\":{\"97\":1}}],[\"+γ\",{\"1\":{\"97\":4}}],[\"++y\",{\"1\":{\"95\":1}}],[\"++x\",{\"1\":{\"95\":1}}],[\"+qc=e\",{\"1\":{\"87\":1}}],[\"+q2=\",{\"1\":{\"53\":1}}],[\"+β\",{\"1\":{\"82\":1,\"97\":4}}],[\"+n⋅\",{\"1\":{\"60\":1}}],[\"+i=0∑n−1​o\",{\"1\":{\"60\":1}}],[\"+i=1∑n−1​o\",{\"1\":{\"60\":1}}],[\"+∑i=0n−1​o\",{\"1\":{\"60\":1}}],[\"+pr\",{\"1\":{\"54\":1}}],[\"+t\",{\"1\":{\"50\":1,\"51\":1,\"53\":1}}],[\"+f\",{\"1\":{\"25\":1,\"124\":1}}],[\"+θ\",{\"1\":{\"19\":1,\"20\":1,\"22\":4,\"23\":1,\"41\":1,\"50\":2,\"51\":2,\"53\":4}}],[\"+\",{\"1\":{\"4\":2,\"5\":1,\"6\":1,\"7\":12,\"18\":1,\"19\":1,\"24\":1,\"36\":3,\"45\":1,\"49\":2,\"58\":2,\"65\":1,\"66\":6,\"73\":1,\"74\":4,\"95\":2,\"124\":1}}],[\"0>\",{\"1\":{\"131\":2}}],[\"0≤q≤n−1\",{\"1\":{\"53\":3}}],[\"0≤c1​g\",{\"1\":{\"13\":1}}],[\"0≤cg\",{\"1\":{\"12\":1,\"15\":1}}],[\"0≤f\",{\"1\":{\"11\":1,\"14\":1}}],[\"0\",{\"1\":{\"4\":1,\"7\":4,\"24\":2,\"29\":2,\"50\":1,\"58\":3,\"60\":6,\"66\":1,\"75\":5,\"95\":2,\"108\":1,\"109\":1,\"123\":2,\"131\":3,\"133\":3,\"135\":1,\"136\":3}}],[\">0​\",{\"1\":{\"95\":1}}],[\">0\",{\"1\":{\"95\":2}}],[\">=0\",{\"1\":{\"81\":1}}],[\">=\",{\"1\":{\"22\":1,\"24\":1,\"35\":1}}],[\">\",{\"1\":{\"4\":2,\"24\":2,\"29\":1,\"41\":2,\"45\":1,\"64\":1,\"66\":2,\"133\":2,\"136\":2}}],[\"j​\",{\"1\":{\"84\":2}}],[\"just\",{\"1\":{\"66\":1}}],[\"j+4g\",{\"1\":{\"66\":1}}],[\"j+3g\",{\"1\":{\"66\":1}}],[\"j+2g\",{\"1\":{\"66\":1}}],[\"j+g\",{\"1\":{\"66\":1}}],[\"j−i+1\",{\"1\":{\"54\":1}}],[\"j\",{\"1\":{\"4\":8,\"5\":3,\"6\":5,\"7\":13,\"18\":4,\"35\":3,\"49\":3,\"58\":8,\"66\":5,\"74\":9}}],[\"1>\",{\"1\":{\"131\":1}}],[\"1=α+β+γ=wa​kα\",{\"1\":{\"97\":1}}],[\"1−qe\",{\"1\":{\"87\":1}}],[\"1−q\",{\"1\":{\"87\":1}}],[\"1−1\",{\"1\":{\"43\":1}}],[\"1d\",{\"1\":{\"81\":1}}],[\"16\",{\"1\":{\"74\":2,\"75\":4}}],[\"10\",{\"1\":{\"51\":2}}],[\"10​第\",{\"1\":{\"36\":1}}],[\"10​if\",{\"1\":{\"31\":1,\"35\":1}}],[\"10​a\",{\"1\":{\"30\":1}}],[\"1p\",{\"1\":{\"36\":1}}],[\"1+∫1n​xp+1f\",{\"1\":{\"25\":1}}],[\"1\",{\"1\":{\"4\":6,\"5\":3,\"6\":5,\"7\":11,\"18\":3,\"19\":10,\"22\":1,\"24\":2,\"29\":4,\"31\":1,\"32\":4,\"33\":7,\"35\":2,\"36\":9,\"41\":1,\"42\":1,\"44\":3,\"45\":7,\"49\":5,\"51\":1,\"52\":1,\"58\":7,\"59\":2,\"60\":8,\"63\":1,\"64\":2,\"65\":2,\"66\":11,\"74\":1,\"75\":6,\"82\":1,\"97\":1,\"126\":1,\"131\":2,\"133\":11,\"134\":1,\"135\":2,\"136\":11}}],[\"sn\",{\"1\":{\"130\":1}}],[\"splitting\",{\"0\":{\"88\":1}}],[\"sampling\",{\"0\":{\"84\":1,\"85\":1,\"86\":1}}],[\"same\",{\"1\":{\"35\":2}}],[\"s=n−11​i=1∑n​\",{\"1\":{\"82\":1}}],[\"sync\",{\"1\":{\"75\":1}}],[\"syncthreads\",{\"1\":{\"74\":1}}],[\"sm\",{\"1\":{\"74\":2}}],[\"smaller\",{\"1\":{\"45\":1}}],[\"smallest\",{\"1\":{\"5\":5}}],[\"select\",{\"1\":{\"65\":3,\"66\":5}}],[\"selection\",{\"1\":{\"5\":1}}],[\"stm=i⇒s=\",{\"1\":{\"130\":1}}],[\"stratified\",{\"0\":{\"84\":1}}],[\"strassen\",{\"0\":{\"20\":1}}],[\"st\",{\"1\":{\"66\":1}}],[\"stable\",{\"1\":{\"59\":1}}],[\"starting\",{\"1\":{\"58\":1}}],[\"side\",{\"1\":{\"49\":1}}],[\"size\",{\"1\":{\"41\":2,\"42\":1,\"44\":2,\"45\":8,\"75\":4}}],[\"swap\",{\"1\":{\"33\":1}}],[\"s\",{\"1\":{\"30\":2,\"128\":2,\"129\":1,\"130\":2,\"134\":1}}],[\"submatrices\",{\"1\":{\"19\":1}}],[\"subarray\",{\"1\":{\"4\":1,\"49\":1}}],[\"sorted\",{\"1\":{\"4\":1}}],[\"sort\",{\"1\":{\"4\":1,\"5\":1,\"6\":1,\"7\":3,\"49\":2,\"58\":1,\"59\":4,\"60\":3,\"66\":2}}],[\"tview​=​1000​0100​0010​−tx​−ty​−tz​1​​\",{\"1\":{\"131\":1}}],[\"tt\",{\"1\":{\"130\":1}}],[\"t=raatrt=rrt=i\",{\"1\":{\"127\":1}}],[\"tz​\",{\"1\":{\"125\":1}}],[\"ty​\",{\"1\":{\"125\":1}}],[\"tx​\",{\"1\":{\"125\":1}}],[\"tri\",{\"1\":{\"95\":1}}],[\"threadsperblock>>>\",{\"1\":{\"74\":2,\"75\":1}}],[\"threadsperblock\",{\"1\":{\"74\":4,\"75\":7}}],[\"thread\",{\"0\":{\"74\":1,\"75\":1},\"1\":{\"75\":1}}],[\"threadidx\",{\"1\":{\"73\":1,\"74\":4}}],[\"than\",{\"1\":{\"29\":1,\"45\":1,\"58\":1}}],[\"the\",{\"1\":{\"4\":1,\"33\":1,\"35\":2,\"45\":1,\"49\":3,\"54\":3,\"58\":3,\"60\":2,\"65\":2,\"66\":5,\"75\":1}}],[\"t\",{\"1\":{\"19\":1,\"20\":1,\"22\":3,\"23\":1,\"24\":4,\"25\":2,\"41\":3,\"43\":1,\"50\":2,\"51\":3,\"53\":6,\"60\":2,\"75\":1,\"125\":2,\"130\":4,\"133\":1,\"134\":2,\"136\":3}}],[\"todo\",{\"1\":{\"84\":1,\"86\":1,\"88\":1}}],[\"together\",{\"1\":{\"60\":1}}],[\"to\",{\"1\":{\"4\":1,\"5\":2,\"6\":1,\"7\":4,\"18\":3,\"29\":1,\"33\":1,\"49\":1,\"58\":7,\"59\":2,\"60\":3,\"64\":1,\"66\":2}}],[\"2=e\",{\"1\":{\"82\":1}}],[\"2−1\",{\"1\":{\"60\":1}}],[\"2−2q\",{\"1\":{\"53\":1}}],[\"2+θ\",{\"1\":{\"53\":1}}],[\"2+2q\",{\"1\":{\"53\":1}}],[\"2​\",{\"1\":{\"53\":1}}],[\"2​=q2+\",{\"1\":{\"53\":1}}],[\"2​=o\",{\"1\":{\"43\":1}}],[\"21\",{\"1\":{\"43\":1}}],[\"2h+1n​\",{\"1\":{\"43\":1}}],[\"2h+1\",{\"1\":{\"43\":1}}],[\"2i+1\",{\"1\":{\"40\":1}}],[\"2i\",{\"1\":{\"40\":1}}],[\"28\",{\"1\":{\"35\":1}}],[\"2n−1\",{\"1\":{\"53\":1}}],[\"2n\",{\"1\":{\"35\":1,\"41\":1}}],[\"2n₀\",{\"1\":{\"22\":1}}],[\"2\",{\"1\":{\"4\":1,\"7\":1,\"19\":11,\"20\":1,\"22\":7,\"29\":1,\"32\":5,\"35\":1,\"36\":2,\"40\":1,\"42\":1,\"43\":2,\"44\":1,\"51\":1,\"53\":2,\"54\":1,\"64\":3,\"66\":1,\"75\":2,\"82\":5,\"97\":1,\"123\":1}}],[\"=​sx​000​0sy​00​00sz​0​0001​​\",{\"1\":{\"128\":1}}],[\"=​cosϕsinϕ00​−sinϕcosϕ00​0010​0001​​\",{\"1\":{\"126\":1}}],[\"=​cosϕ0−sinϕ0​0100​sinϕ0cosϕ0​0001​​\",{\"1\":{\"126\":1}}],[\"=​1000​0100​s010​0001​​\",{\"1\":{\"129\":1}}],[\"=​1000​0100​0010​tx​ty​tz​1​​\",{\"1\":{\"125\":1}}],[\"=​1000​0cosϕsinϕ0​0−sinϕcosϕ0​0001​​\",{\"1\":{\"126\":1}}],[\"=f\",{\"1\":{\"124\":1}}],[\"=α\",{\"1\":{\"97\":1}}],[\"=αa\",{\"1\":{\"97\":1}}],[\"=mα\",{\"1\":{\"97\":1}}],[\"=m\",{\"1\":{\"97\":3}}],[\"=max\",{\"1\":{\"53\":1}}],[\"=⎩⎨⎧​​1−qf−qc​c​\",{\"1\":{\"87\":1}}],[\"=0​\",{\"1\":{\"85\":1}}],[\"=1\",{\"1\":{\"85\":1}}],[\"=v\",{\"1\":{\"82\":1}}],[\"=a2v\",{\"1\":{\"82\":1}}],[\"=e\",{\"1\":{\"82\":2}}],[\"=∫ab​f\",{\"1\":{\"81\":1}}],[\"=j−i+12​​\",{\"1\":{\"54\":1}}],[\"=cf\",{\"1\":{\"85\":2}}],[\"=c⋅max\",{\"1\":{\"53\":1}}],[\"=cnlgn−cn+θ\",{\"1\":{\"22\":1}}],[\"=cnlg\",{\"1\":{\"22\":1}}],[\"=t\",{\"1\":{\"50\":1,\"51\":1,\"125\":1}}],[\"=pr\",{\"1\":{\"54\":1}}],[\"=p\",{\"1\":{\"33\":1}}],[\"=ntstmt=0=ntt​\",{\"1\":{\"130\":1}}],[\"=n1​v\",{\"1\":{\"82\":1,\"85\":1}}],[\"=n21​i=1∑n​v\",{\"1\":{\"82\":1}}],[\"=nb−a​i=1∑n​∫ab​f\",{\"1\":{\"81\":1}}],[\"=nb−a​i=1∑n​e\",{\"1\":{\"81\":1}}],[\"=n−k1​⋅n\",{\"1\":{\"33\":1}}],[\"=n\",{\"1\":{\"33\":1,\"36\":1}}],[\"=i=1∑n−1​j=i+1∑n​j−i+12​=i=1∑n−1​k=1∑n−i​k+12​<i=1∑n−1​k=1∑n​k2​=i=1∑n−1​o\",{\"1\":{\"54\":1}}],[\"=i=1∑n−1​j=i+1∑n​pr\",{\"1\":{\"54\":1}}],[\"=i=1∑n−1​j=i+1∑n​e\",{\"1\":{\"54\":1}}],[\"=i=1∑n​i1​=lnn+o\",{\"1\":{\"31\":1}}],[\"=i=1∑n​e\",{\"1\":{\"31\":1,\"36\":1}}],[\"=i=1∑b​b−i+1b​=bi=1∑b​i1​=b\",{\"1\":{\"36\":1}}],[\"=i=1∑b​e\",{\"1\":{\"36\":1}}],[\"=i=1∑k−1​j=i+1∑k​e\",{\"1\":{\"35\":1}}],[\"=i=1∑k​ai​t\",{\"1\":{\"25\":1}}],[\"=ω\",{\"1\":{\"24\":1}}],[\"=3t\",{\"1\":{\"23\":1}}],[\"=2t\",{\"1\":{\"22\":1,\"51\":1}}],[\"=o\",{\"1\":{\"20\":1,\"22\":1,\"24\":1,\"54\":1}}],[\"=7t\",{\"1\":{\"20\":1}}],[\"=θ\",{\"1\":{\"19\":1,\"20\":1,\"24\":4,\"25\":1,\"50\":1,\"51\":2,\"53\":1,\"59\":1,\"60\":4}}],[\"=8t\",{\"1\":{\"19\":1}}],[\"==\",{\"1\":{\"19\":1,\"45\":1,\"65\":2,\"66\":2}}],[\"=\",{\"1\":{\"4\":6,\"5\":4,\"6\":2,\"7\":21,\"11\":1,\"12\":1,\"13\":1,\"14\":1,\"15\":1,\"18\":4,\"19\":2,\"24\":1,\"29\":3,\"30\":3,\"31\":1,\"32\":1,\"33\":7,\"35\":5,\"36\":9,\"41\":6,\"42\":2,\"44\":2,\"45\":10,\"49\":5,\"52\":2,\"58\":9,\"59\":1,\"60\":3,\"64\":3,\"65\":2,\"66\":8,\"73\":2,\"74\":7,\"75\":9,\"87\":1,\"95\":3,\"124\":2,\"130\":2,\"131\":3}}],[\"image\",{\"1\":{\"95\":1}}],[\"importance\",{\"0\":{\"85\":1,\"86\":1}}],[\"i=1∪n​λi​=λ\",{\"1\":{\"84\":1}}],[\"i=1∑n−1​j=i+1∑n​xij​\",{\"1\":{\"54\":1}}],[\"i=1∑n​xi​\",{\"1\":{\"31\":1,\"36\":1}}],[\"i=1∑b​xi​\",{\"1\":{\"36\":1}}],[\"i=1∑k−1​j=i+1∑k​xij​\",{\"1\":{\"35\":1}}],[\"i=1∑k​bip​ai​​=1\",{\"1\":{\"25\":1}}],[\"id\",{\"1\":{\"75\":1}}],[\"i+1\",{\"1\":{\"49\":1}}],[\"is\",{\"1\":{\"29\":2,\"31\":3,\"45\":1,\"54\":6,\"65\":1,\"66\":1}}],[\"if\",{\"1\":{\"5\":1,\"6\":1,\"7\":2,\"19\":1,\"29\":1,\"41\":3,\"45\":3,\"49\":2,\"52\":1,\"64\":1,\"65\":3,\"66\":5,\"74\":1}}],[\"inside\",{\"1\":{\"95\":1}}],[\"insert\",{\"1\":{\"4\":1,\"45\":1,\"60\":1}}],[\"insertion\",{\"1\":{\"4\":1,\"60\":1}}],[\"input\",{\"1\":{\"75\":6}}],[\"index\",{\"1\":{\"45\":1,\"49\":1}}],[\"increase\",{\"1\":{\"45\":2}}],[\"int\",{\"1\":{\"73\":2,\"74\":7,\"75\":2,\"95\":2}}],[\"interview\",{\"1\":{\"29\":1}}],[\"into\",{\"1\":{\"4\":1,\"19\":1,\"49\":1,\"60\":1,\"66\":1}}],[\"in\",{\"1\":{\"5\":1,\"49\":1,\"60\":1,\"66\":2}}],[\"i\",{\"1\":{\"4\":5,\"5\":6,\"6\":2,\"7\":13,\"18\":4,\"29\":5,\"30\":3,\"31\":4,\"33\":3,\"35\":3,\"36\":5,\"40\":4,\"41\":7,\"42\":2,\"44\":2,\"45\":9,\"49\":5,\"52\":2,\"58\":10,\"59\":2,\"60\":9,\"63\":3,\"64\":3,\"65\":5,\"66\":9,\"73\":4,\"74\":9}}],[\"n⋅h\",{\"1\":{\"109\":1}}],[\"n⋅l\",{\"1\":{\"108\":1}}],[\"n1​i=1∑n​p\",{\"1\":{\"82\":1}}],[\"n1​=2nk\",{\"1\":{\"35\":1}}],[\"nb−a​i=1∑n​f\",{\"1\":{\"81\":1}}],[\"numattrs\",{\"1\":{\"75\":1}}],[\"numblocks\",{\"1\":{\"74\":2,\"75\":3}}],[\"number\",{\"1\":{\"58\":2,\"66\":1}}],[\"ni2​\",{\"1\":{\"60\":3}}],[\"ni​\",{\"1\":{\"60\":1,\"84\":1}}],[\"n+2r\",{\"1\":{\"59\":2}}],[\"n+k\",{\"1\":{\"58\":1,\"59\":3}}],[\"n+x\",{\"1\":{\"54\":1}}],[\"now\",{\"1\":{\"58\":2,\"66\":1}}],[\"not\",{\"1\":{\"30\":1,\"31\":1,\"139\":1}}],[\"n−1−q\",{\"1\":{\"53\":4}}],[\"n−1\",{\"1\":{\"50\":2,\"53\":6,\"82\":1}}],[\"n−k−1\",{\"1\":{\"33\":1}}],[\"n−k\",{\"1\":{\"33\":2}}],[\"n>>>\",{\"1\":{\"73\":1}}],[\"n>\",{\"1\":{\"29\":1}}],[\"np\",{\"1\":{\"25\":1}}],[\"nlogb​a+ϵ\",{\"1\":{\"24\":1}}],[\"nlogb​algk+1n\",{\"1\":{\"24\":1}}],[\"nlogb​algkn\",{\"1\":{\"24\":1}}],[\"nlogb​a\",{\"1\":{\"24\":1}}],[\"nlogb​a−ϵ\",{\"1\":{\"24\":1}}],[\"nlgn\",{\"1\":{\"22\":1,\"44\":1,\"51\":2,\"54\":2,\"57\":1}}],[\"nlg7\",{\"1\":{\"20\":1}}],[\"n2\",{\"1\":{\"20\":2,\"23\":1,\"50\":1,\"53\":1,\"65\":1}}],[\"n3\",{\"1\":{\"18\":1,\"19\":1}}],[\"n→∞lim​g\",{\"1\":{\"14\":1,\"15\":1}}],[\"new\",{\"1\":{\"7\":1,\"45\":1,\"58\":1,\"60\":1}}],[\"n\",{\"1\":{\"4\":2,\"5\":4,\"6\":3,\"7\":8,\"11\":4,\"12\":4,\"13\":5,\"14\":6,\"15\":6,\"18\":4,\"19\":14,\"20\":2,\"22\":15,\"23\":2,\"24\":14,\"25\":5,\"29\":6,\"32\":4,\"33\":18,\"35\":2,\"36\":1,\"41\":2,\"42\":3,\"43\":5,\"44\":3,\"45\":2,\"50\":4,\"51\":7,\"53\":10,\"54\":3,\"58\":4,\"59\":6,\"60\":16,\"63\":2,\"64\":4,\"65\":1,\"74\":18,\"75\":4,\"82\":2,\"84\":1,\"121\":3,\"130\":3,\"133\":3,\"136\":5}}],[\"aabb\",{\"1\":{\"133\":4,\"136\":4}}],[\"ambient\",{\"0\":{\"107\":1}}],[\"a1​\",{\"1\":{\"97\":3}}],[\"a11​⋅b11​+a12​⋅b21​a21​⋅b11​+a22​⋅b21​​a11​⋅b12​+a12​⋅b22​a21​⋅b12​+a22​⋅b22​​\",{\"1\":{\"19\":1}}],[\"a11​a21​​a12​a22​​\",{\"1\":{\"19\":1}}],[\"abc\",{\"1\":{\"96\":1,\"97\":2}}],[\"ab×aq​\",{\"1\":{\"95\":1}}],[\"ac×aq​\",{\"1\":{\"95\":1}}],[\"ac×ab\",{\"1\":{\"95\":1}}],[\"algorithm\",{\"0\":{\"94\":1}}],[\"all\",{\"1\":{\"66\":1}}],[\"answer\",{\"1\":{\"65\":1}}],[\"an\",{\"1\":{\"60\":1}}],[\"and\",{\"1\":{\"4\":1,\"5\":1,\"7\":2,\"19\":1,\"35\":2,\"41\":2,\"45\":1,\"58\":1}}],[\"array\",{\"1\":{\"59\":1,\"60\":1}}],[\"arrays\",{\"1\":{\"7\":1,\"58\":1}}],[\"around\",{\"1\":{\"49\":1,\"66\":1}}],[\"assistant\",{\"1\":{\"29\":1,\"33\":2}}],[\"akra\",{\"0\":{\"25\":1},\"1\":{\"25\":1}}],[\"af\",{\"1\":{\"24\":1,\"82\":1}}],[\"attrs\",{\"1\":{\"75\":1}}],[\"attribute\",{\"1\":{\"75\":6}}],[\"at\",{\"1\":{\"24\":1}}],[\"a₂₂\",{\"1\":{\"19\":2}}],[\"a₂₁\",{\"1\":{\"19\":2}}],[\"a₁₂\",{\"1\":{\"19\":2}}],[\"a₁₁\",{\"1\":{\"19\":2}}],[\"a\",{\"1\":{\"4\":8,\"5\":7,\"6\":5,\"7\":13,\"18\":2,\"19\":3,\"24\":1,\"29\":1,\"30\":5,\"33\":10,\"41\":10,\"42\":3,\"44\":7,\"45\":24,\"49\":12,\"52\":8,\"58\":9,\"59\":3,\"60\":5,\"64\":4,\"65\":6,\"66\":19,\"73\":3,\"74\":6,\"75\":1,\"81\":1,\"95\":1,\"97\":5,\"127\":1}}],[\"插入排序\",{\"0\":{\"4\":1}}],[\"算法\",{\"2\":{\"2\":1,\"8\":1,\"16\":1,\"26\":1,\"37\":1,\"46\":1,\"55\":1,\"61\":1,\"67\":1}}],[\"算法导论\",{\"0\":{\"1\":1}}],[\"介绍页\",{\"0\":{\"0\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
